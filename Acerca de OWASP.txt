13
Acerca de OWASP
El Open Web Application Security Project (OWASP) es un espacio abierto de la comunidad
dedicada a la búsqueda y la lucha contra las causas del software inseguro. Todas las
herramientas, documentos, foros, y los capítulos de OWASP son gratuitos y abiertos a cualquier
persona interesada en mejorar la seguridad de aplicaciones.
http://www.owasp.org/
OWASP es un nuevo tipo de entidad en el mercado de la seguridad. Nuestra libertad de las
presiones comerciales nos permite brindar información imparcial, práctica, y rentable sobre
seguridad de aplicaciones. OWASP no está afiliado con ninguna compañía de tecnología, sin
embargo apoya la utilización de tecnología de seguridad.
Somos partidarios de acercarnos a la seguridad de aplicaciones como un problema de las
personas, procesos y tecnología. Los enfoques más efectivos para seguridad de aplicaciones
incluyen mejoras en todas estas áreas. 

Estructura y Licenciamiento
La Fundación OWASP es una entidad sin fines de lucro (501c3) que proporciona la
infraestructura para la comunidad de OWASP. La Fundación proporciona nuestros servidores y
ancho de banda, facilita los proyectos y capítulos, y gestiona las Conferencias OWASP de
Seguridad de Aplicaciones en todo el mundo.
Todos los materiales OWASP están disponibles bajo un aprobado método de licencia de código
abierto. Si opta por convertirse en una organización miembro de OWASP, también puede utilizar
la licencia comercial que le permite usar, modificar y distribuir todos los materiales OWASP
dentro de su organización bajo una única licencia.
Participación y Membresía
Todo el mundo es bienvenido a participar en nuestros foros, proyectos, capítulos, y
conferencias. OWASP es un lugar fantástico para aprender sobre seguridad de aplicaciones, de
red, e incluso construir su reputación como un experto. Muchos expertos en seguridad de
aplicaciones y las empresas participan en OWASP porque la comunidad establece su
credibilidad.
Si los materiales de OWASP le resultan útiles, por favor, considere la posibilidad de apoyar 
************************************************************************************************************************************************************************************************************
14

nuestra causa por convertirse en un miembro OWASP. Todo el dinero recibido por la Fundación
OWASP será destinado directamente al apoyo de proyectos de OWASP.
Proyectos
Los proyectos de OWASP están ampliamente divididos en dos categorías principales: los
proyectos de desarrollo, y los proyectos de documentación.
Nuestros proyectos de documentación actualmente consisten en:
• La Guía - Este documento que proporciona orientación detallada sobre la seguridad de
aplicaciones web.
• El Top Ten de las vulnerabilidades más criticas de Aplicaciones Web - Un documento de alto
nivel para ayudar a centrarse en las cuestiones más críticas.
• Métricas - Un proyecto viable para definir las métricas de seguridad de aplicaciones web.
• Legal - Un proyecto de software para ayudar a compradores y vendedores negociar una
seguridad adecuada en sus contratos.
• Guía de Testeo - Una guía eficaz centrada en pruebas de la seguridad de aplicaciones web.
• ISO17799 - Los documentos de soporte para las organizaciones haciendo revisiones ISO17799
• AppSec FAQ - Preguntas frecuentes y respuestas sobre seguridad de aplicaciones
Los proyectos de desarrollo incluyen:
• WebScarab - una aplicación Web que incluye una suite de evaluación de vulnerabilidades y
herramientas Proxy.
• Los filtros de validación - (Stinger para J2EE, filtros para PHP) filtros de frontera genéricos de
seguridad que los desarrolladores pueden utilizar en sus propias aplicaciones.
• WebGoat - una herramienta de capacitación y evaluación interactiva que los usuarios pueden
utilizar para aprender sobre seguridad de aplicaciones web en un lugar seguro y legal.
• DotNet - una variedad de herramientas para asegurar entornos .NET. 
*************************************************************************************************************************************************************************************************************
15

Introducción
Hemos re-escrito completamente la Guía, ocupándonos de todas las cuestiones de seguridad
en aplicaciones web, desde las más antiguas, como la inyección SQL, hasta las modernas tales
como la suplantación de identidad, manipulación de tarjetas de crédito, fijación del período de
sesiones, falsificaciones de petición en sitios cruzados, el cumplimiento de las reglas y
cuestiones de privacidad.
En la Guía 2.0, encontrará detalles sobre la seguridad de la mayoría de las formas de
aplicaciones web y servicios, con una orientación práctica utilizando ejemplos de J2EE,
ASP.NET, PHP. Ahora utilizamos el gran éxito del estilo OWASP Top 10, pero con más
profundidad, y referencias que lo harán comprender a usted mucho más.
La seguridad no es un terreno blanco o negro, sino que son muchos tonos de gris. En el
pasado, muchas organizaciones deseaban comprar una simple bala de plata de seguridad -
"hacerlo de esta manera o seguir esta lista al pie de la letra, y usted estará seguro." El
pensamiento en blanco y negro es siempre equivocado, costoso, e ineficaz.
El modelado de Riesgo de Amenazas es el método más importante de mitigación en el
desarrollo de aplicaciones Web de seguridad en los últimos tres años. Se introducen los
conceptos básicos de Microsoft sobre el modelado de riesgo de amenazas, y los detalles de varias
estrategias de otras empresas, incluyendo Trike, CVSS, AS4360, y Octave. Instamos
enérgicamente a usted a adoptar uno de ellos el día de hoy. Si analizamos detenidamente y
seleccionamos los controles a través del modelado de riesgo de la amenazas, el resultado final
será una implementación de sistemas que demostrablemente reducen los riesgos de negocio, que
generalmente conduce a un aumento de la seguridad y la reducción de los fraudes y pérdidas.
Estos controles suelen ser baratos, eficaces y sencillos de aplicar.
En algunos países, el desarrollo basado en el riesgo no es un extra opcional, sino por mandato
legal. Para nuestros lectores de EE.UU., el cumplimiento de Sarbanes Oxley parece
engañosamente simple: demostrar que los controles aplicados en los sistemas financieros son
adecuados, y que el personal directivo superior cree que los controles son efectivos. ¿Cómo una
organización realmente verifica que se cumplan dichas controles? Ellos auditan alineados a una
norma acordada, que difiere de un país a otro, pero las normas comunes incluyen COBIT, ISO
17799, y así sucesivamente. La Guía ofrece claves en COBIT para ayudar rápidamente con su 

*******************************************************************************************************************************************************************************************

16

cumplimiento SOX y proporciona una base para sus vendedores y probadores de penetración.
Las futuras ediciones de la Guía se extenderán a la norma ISO 17799.
Al igual que ocurre con un proyecto de larga vida, hay una necesidad de mantener el material
fresco y pertinente. Por lo tanto, algunos materiales mas antiguos se han migrado al portal de
OWASP o directamente reemplazados con el asesoramiento actualizado.
A título personal, deseo hacer extensivo mi agradecimiento a los numerosos autores, revisores,
los editores y por su ardua labor para lograr que esta guía sea lo que es hoy. Nos apoyamos en
hombros de gigantes, y esta Guía no es una excepción.
Si tiene algún comentario o sugerencia sobre la Guía, por favor envíe un e-mail a la lista de
correo de la Guía (ver nuestro sitio web para más detalles) o póngase en contacto conmigo
directamente.
Andrew van der Stock, vanderaj@owasp.org
Melbourne, Australia
July 26, 2005 


*********************************************************************************************************************************************************************************************
17

¿Que son las aplicaciones web?
Descripción general
En los inicios de Internet, los sitios web consistían de páginas estáticas. Obviamente, el
contenido estático impedía a la aplicación interactuar con el usuario. Como esto es un limitante,
los fabricantes de servidores web permitieron correr programas externos mediante la
implementación del mecanismo CGI. Esto permitía que la información ingresada por el usuario
fuera enviada a un programa externo o script, procesado y luego el resultado era devuelto al
usuario. CGI es el abuelo de todos los marcos de aplicaciones web, lenguajes de script y
servicios web que son comunes hoy en día.
CGI es raramente utilizado ahora, pero la idea de un proceso ejecutando información
dinámica suministrada por el usuario o un almacén de datos, y generando una salida es ahora el
pilar de las aplicaciones web.
Tecnologías
CGI
CGI es aun utilizado por muchos sitios. Una ventaja de CGI es la facilidad para escribir la
lógica de la aplicación en un lenguaje nativo rápido, tal como C o C++, o de habilitar una
aplicación que previamente no era web a que sea accesible vía navegadores web.
Existen varias desventajas al escribir aplicaciones usando CGI:
La mayoría de los lenguajes de bajo nivel no soportan salidas de HTML de manera directa, y
por lo tanto se necesita escribir o utilizar una librería, o una salida HTML deber ser creada en el
momento por el programador.
El ciclo escritura – compilación – implementación – ejecución es mas lento que en la
mayoría de las tecnologías mas recientes (pero no demasiado).
CGI son procesos separados, y la penalización en el rendimiento de IPC y en la creación de
procesos puede ser significativa en algunas arquitecturas. 

***********************************************************************************************************************************************************************************************************

18

CGI no soporta controles de sesión, por lo tanto una librería tiene que ser escrita o importada
para soportar sesiones.
No todos se encuentran confortables escribiendo en un lenguaje de bajo nivel (tal como C o
C++), por lo tanto la barrera de ingreso es de alguna manera alta, particularmente comparado con
lenguajes de script.
La mayoría de los lenguajes de 3ra generación comúnmente utilizados en programas CGI (C
o C++) sufren de desbordamientos de pila y pérdida de recursos. Para evitar esto, es necesaria
una gran cantidad de habilidades.
Filtros
Los filtros son usados para propósitos específicos, tales como controlar el acceso a un sitio
web, implementar otro marco de aplicaciones web (por ejemplo Perl, PHP o ASP), o proveer un
control de seguridad. Un filtro debe ser escrito en C o C++ y puede ser de alto rendimiento ya
que reside dentro del contexto de ejecución del mismo servidor web. Ejemplos típicos de una
interfase de filtro son los módulos de servidor web Apache, SunONE NSAPI’s, y Microsoft
ISAPI’s. Ya que los filtros son interfases especiales raramente utilizadas que pueden
directamente afectar la disponibilidad del servidor web, ya no son más considerados.
Scripting
La falta de controles de CGI sobre el manejo de sesiones y los controles de autorización ha
obstaculizado el desarrollo de aplicaciones web de utilidad comercial. Junto con tiempos de
desarrollo relativamente más lentos, los desarrolladores web se han inclinado hacia lenguajes de
script como una solución. Los intérpretes corren código script dentro del proceso del servidor
web, y debido a que los scripts no son compilados, el ciclo escritura – implementación –
ejecución era un poco más rápido. Los lenguajes de script raramente sufren de desbordamientos
de pila o pérdidas de recursos, por lo tanto es más fácil para los programadores evitar uno de los
problemas de seguridad más comunes.
Tiene algunas desventajas: 

*****************************************************************************************************
19

La mayoría de los lenguajes de script no se encuentran solidamente tipificados y no
promueven buenas prácticas de programación.
Los lenguajes de script son generalmente mas lentos que sus contrapartes compilados
(algunas veces hasta 100 veces mas lento).
Los scripts muchas veces llevan a generar código fuente difícil de mantener a medida que su
tamaño aumenta.
Es difícil (pero no imposible) escribir grandes aplicaciones de varias capas en lenguajes de
script, muy frecuentemente la capa de presentación, aplicación y datos residen en la misma
maquina, limitando la escalabilidad y seguridad.
La mayoría de los lenguajes de script no soportan nativamente métodos remotos o llamadas
de servicios web, haciendo difícil la comunicación con servidores de aplicación y servicios web
externos.
A pesar de sus desventajas, muchas aplicaciones aun son escritas en lenguaje de script, tales
como eGroupWare (PHP), y muchos sitios antiguos de banca electrónica se encuentran
frecuentemente escritos en ASP.
Los marcos de lenguaje de script incluyen ASP, Perl, Cold Fusion, y PHP. Sin embargo,
muchos de estos son considerados híbridos ahora, particularmente las últimas versiones de PHP
y Cold Fusion, que permiten la optimización de scripts.
Marcos de aplicaciones web
A medida que los lenguajes de script alcanzaban sus límites de rendimiento y escalabilidad,
muchos grandes proveedores se movieron a la plataforma Sun de desarrollo web: J2EE.
Utiliza el lenguaje Java para producir aplicaciones veloces (casi tan veloces como C++) que
no fácilmente sufren de desbordamiento de pila y pérdidas de memoria.
Permite a aplicaciones grandes distribuidas ejecutarse aceptablemente desde la primera vez.
Posee buenos controles de autorización y sesión.
Habilita aplicaciones de varias capas relativamente transparentes a través de varios
mecanismos de invocación remota, y 

*****************************************************************************************************
20

Es fuertemente codificado para prevenir muchos problemas típicos de seguridad y
programación antes que el programa sea ejecutado.
Hay muchas implementaciones de J2EE disponible, incluyendo la versión de referencia de
Tomcat de la fundación Apache. La desventaja es que J2EE tiene una curva de aprendizaje o mas
pronunciada que C++, lo que hace que le resulte difícil escribir aplicaciones a diseñadores web y
programadores recién iniciados. Recientemente las herramientas de diseño grafico han facilitado
esto de alguna manera, pero a comparación que PHP, J2EE se encuentra aun a cierta distancia.
Microsoft actualizo su tecnología ASP a ASP.Net, que utiliza el marco .Net y compiladores
nativos MSIL justo a tiempo. El marco .Net mimetiza de muchas formas el marco J2EE, pero
MS mejoro el proceso de desarrollo de varias maneras tales como:
Resulta más fácil a los programadores recién iniciados y a los diseñadores web crear
aplicaciones más pequeñas.
Permite grandes aplicaciones distribuidas.
Posee buenos controles de sesión y autorización.
Los programadores pueden usar su lenguaje favorito, que es compilado a código nativo
permitiendo un excelente rendimiento (cercano a las velocidades de C++), además de la
recolección de desbordamiento de pila y residuos de recursos.
Comunicación transparente con componentes remotos y externos.
Se encuentre fuertemente codificada para prevenir problemas comunes de seguridad y
programación antes que el programa sea ejecutado.
La elección entre J2EE y ASP.Net depende mayormente de la plataforma elegida. Las
aplicaciones que se orientan a J2EE teóricamente pueden ser ejecutadas con pocos (o ningún)
cambio entre los proveedores mas importantes. Y en muchas plataformas de Linux, AIX, MacOS
X, o Windows. En practica, algunos ajustes son requeridos, pero no reescribir completamente la
aplicación.
ASP.Net se encuentra disponible principalmente Microsoft Windows. El proyecto Mono
(http://www.go-mono.com/) puede correr aplicaciones ASP.Net en diversas plataformas
incluyendo Solaris, Netware, Linux.
Existen pocas razones para elegir una a la otra desde la perspectiva de la seguridad. 

*****************************************************************************************************
21

Aplicaciones de pequeña a mediana escala
La mayoría de las aplicaciones se encuentran dentro de esta categoría. La arquitectura mas
común es un script lineal procedural y simple. Esta es la forma mas usual de codificación para
ASP, Coldfusion y scripts PHP. Pero menos utilizada (sino imposible) para ASP.Net y
aplicaciones J2EE.
La razón para esta arquitectura es que resulta fácil de escribir, y se requiere poco
conocimiento técnico para mantener el código. Para aplicaciones mas pequeñas, cualquier
beneficio en el rendimiento obtenido por moverse a una arquitectura mas escalable nunca será
recuperado en el tiempo de ejecución. Por ejemplo, si se requieren tres semanas adicionales de
tiempo de desarrollo para re-escribir los scripts a un enfoque MVC, las tres semanas nunca serán
recuperadas (o notadas por los usuarios finales) de las mejoras en escalabilidad.
Es típico encontrar diversos problemas de seguridad en estas aplicaciones, incluyendo
consultas dinámicas de bases de datos construidas con entradas de datos insuficientemente
validadas, un manejo pobre de errores y controles débiles de autorización.
Esta guía provee recomendaciones de los diversos capítulos para mejorar la seguridad de
estas aplicaciones.
Aplicaciones de gran escala
Las aplicaciones de gran escala necesitan una arquitectura diferente de aquella de un simple
formulario de encuesta. A medida que las aplicaciones crecen en tamaño, resulta cada vez más
difícil el implementar y mantener funcionalidades y mantener una alta escalabilidad. La
utilización de arquitecturas de aplicación escalables se convierte en una necesidad mas que en un
lujo cuando la aplicación necesita mas de tres tablas de base de datos o presenta mas de
aproximadamente 20-50 funciones a un usuario.
Una arquitectura de aplicación escalable normalmente se encuentra dividida en niveles, y si
se utilizan patrones de diseño, muchas veces se dividen en porciones reutilizables usando
diferentes lineamientos específicos para reforzar la modularidad, requerimientos de interfase y la
reutilización de objetos. El dividir la aplicación en niveles permite que la aplicación se pueda
distribuir entre varios servidores, mejorando por lo tanto la escalabilidad de la aplicación a
expensas de mayor complejidad.
Una de las arquitecturas de aplicaciones web más comunes es Modelo Vista Controlador
(MVC), que implementa la arquitectura de aplicación Smalltalk 80. MVC es típico de la mayoría 


*****************************************************************************************************
22

de las aplicaciones J2EE de Apache Foundation Jakarta Struts, y el código detrás de ASP.Net
puede ser considerado una implementación parcial de este enfoque. Para PHP, el proyecto
WACT (http://www.wact.sourceforge.net) aspira a implementar el paradigma MVC de una
manera más amigable para PHP.
Vista
La renderización de código front-end, frecuentemente llamada nivel de presentación, debería
aspirar a producir la salida HTML para el usuario con poco o nada de lógica de aplicación.
Como muchas aplicaciones serán internacionalizadas (por ejemplo no conteniendo cadenas
localizadas o información cultural en la capa de presentación), deben usar llamadas al modelo
(lógica de aplicación) para obtener la información requerida para suministrar información útil al
usuario en su lenguaje y cultura preferido, dirección del script, y unidades.
Todas las entradas de los usuarios se encuentran redireccionadas hacia los controladores en la
lógica de la aplicación.
Controlador
El controlador (o lógica de la aplicación) toma entradas de los usuarios y las dirige a través
de varios flujos de trabajo que llaman a los objetos del modelo de la aplicación para extraer,
procesar, o almacenar información.
Los controladores bien codificados, validan información centralmente en el servidor contra
problemas de seguridad comunes antes de pasar la información al modelo de procesamiento y se
aseguran que la salida de datos sea segura o en un formato preparado para una salida segura por
parte del código de visualización.
Debido a que es probable que la aplicación sea internacionalizada y accesible, la información
debería encontrarse en el lenguaje y cultura local. Por ejemplo, las fechas no solo pueden
presentarse en distinto orden, pero también se podría utilizar un calendario completamente
distinto. Las aplicaciones deben ser flexibles respecto de la presentación y almacenamiento de
información. El desplegar simplemente “9/11/2001” es completamente ambiguo para cualquiera
excepto por un par de países.
Modelos
Los modelos encapsulan funcionalidades tales como “cuenta” o “usuario”. Un buen modelo
debe ser transparente al programa que lo llama y proveer un método para lidiar con procesos de

*****************************************************************************************************
23

negocio de alto nivel en vez de actuar como un relleno para el almacenamiento de datos. Por
ejemplo, un buen modelo permitiría que exista en el controlador pseudo código como el
siguiente:
oAccount->TransferFunds(fromAcct, ToAcct, Amount)
Más que escribirlo de la siguiente manera:
if oAccount->isMyAcct(fromAcct) &
 amount < oAccount->getMaxTransferLimit() &
 oAccount->getBalance(fromAcct) > amount &
 oAccount->ToAccountExists(ToAcct) &
then
 if oAccount->withdraw(fromAcct, Amount) = OK then
 oAccount->deposit(ToAcct, Amount)
 end if
end if
 La idea es encapsular el trabajo sucio en el modelo de código, en lugar de exponer
primitivas. Si el controlador y el modelo se encuentran en diferentes máquinas, la diferencia de
rendimiento será asombrosa, por lo que es importante para el modelo ser útil a un nivel alto.
El modelo es responsable de la comprobación de datos en contra de las reglas de negocio, y
cualquier riesgo residual para el único almacén de datos en uso. Por ejemplo, si un modelo
almacena los datos en un archivo plano, el código necesita comprobar la inyección de comandos
de sistema operativo si los archivos planos han sido nombrados por el usuario. Si el modelo
almacena los datos en un lenguaje interpretado, como SQL, entonces el modelo se encarga de la
prevención de inyección de SQL. Si se utiliza una interfaz de cola de mensajes a un mainframe,
el formato de datos de la cola de mensajes (normalmente XML) debe estar bien formado y
cumple con una DTD.
El contrato entre el controlador y el modelo debe ser examinado cuidadosamente para
garantizar que los datos están fuertemente tipificados, con una estructura razonable (sintaxis),
una longitud apropiada, al tiempo que permita flexibilidad para permitir la internacionalización y
las necesidades futuras.
Llamadas por el modelo al almacén de datos debe ser a través del método más seguro
posible. A menudo, la posibilidad más débil son las consultas dinámicas, cuando una cadena se
construye a partir de la entrada de un usuario sin verificar. Esto lleva directamente a la inyección
de SQL y está mal visto. Para más información, vea el capítulo Inyecciones de Intérprete. 

*****************************************************************************************************
24
El mejor desempeño y mayor seguridad a menudo se obtiene a través de procedimientos
almacenados parametrizados, seguido de consultas parametrizadas (también conocidas como
declaraciones preparadas) con una fuerte tipificación de los parámetros y esquemas. La principal
razón para el uso de procedimientos almacenados es reducir al mínimo el tráfico de la red en
transacciones de múltiples niveles o para evitar que información sensible sea transmitida por la
red.
Los procedimientos almacenados no son siempre una buena idea – lo atan a un proveedor de
base de datos y muchas implementaciones no son rápidas para el cálculo numérico. Si utiliza la
regla 80/20 para la optimización y mueve las transacciones lentas y de alto riesgo a
procedimientos almacenados, los triunfos valdrán la pena desde un punto de vista de seguridad y
rendimiento.
Conclusión
Las aplicaciones web se pueden escribir de muchas maneras diferentes, y en muchos idiomas
diferentes. Aunque la Guía se concentra en las tres opciones comunes para sus ejemplos (PHP,
ASP.NET y J2EE), la Guía puede utilizarse con cualquier aplicación web de tecnología. 

****************************************************************************************************
25

Arquitectura y Diseño de Seguridad
Aplicaciones Seguras desde el Diseño 

****************************************************************************************************
26
Marcos de Política
Sumario
Las aplicaciones seguras no se dan por si mismas – son en cambio el resultado de una
organización decidiendo que va a producir aplicaciones seguras. OWASP no desea forzar un
enfoque particular o requerir a la organización el cumplimiento de leyes que no la afectan – cada
organización es diferente.
Sin embargo, a los fines de obtener una aplicación segura, se requiere como mínimo:
Una gestión organizacional que abogue por la seguridad
Políticas de seguridad documentadas y apropiadamente basadas en estándares nacionales
Una metodología de desarrollo con adecuados puntos de control y actividades de seguridad
Gestión segura de versiones y configuración
Muchos de los controles contenidos en la Guía OWASP 2.0 se encuentran influenciados por
requerimientos incluidos en estándares nacionales o marcos de control tales como COBIT;
normalmente los controles seleccionados de la guía satisfacerán los requerimientos relevantes de
ISO 17799 o COBIT.
Compromiso Organizacional con la Seguridad
Aquellas organizaciones donde la seguridad cuenta con el soporte de la alta gerencia
generalmente desarrollaran y adquirirán aplicaciones que cumplen con principios básicos de
seguridad. Este es el primero de los muchos pasos a lo largo del camino que conduce entre ad
hoc “posiblemente seguras (pero probablemente no)” y “muy seguras”.
En cambio, es muy poco probable que organizaciones que no cuentan con el soporte de la
gerencia, o que simplemente no se preocupan por la seguridad, desarrollen aplicaciones seguras.
Cada organización segura documenta su apetito por el riesgo en su política de Seguridad de la
información, haciendo de esa manera que sea fácil determinar que riesgos serán aceptados,
mitigados o asignados. 

****************************************************************************************************
27
Las organizaciones inseguras simplemente no conocen donde se encuentra este limite, por lo
tanto es probable que cuando los proyectos dirigidos por este tipo de organizaciones seleccionan
los controles a implementar, que estos terminen siendo inadecuados o insuficientes. Se han
encontrados raros ejemplos donde todos los controles, incluyendo un colador de hojas de te para
fregadero de cocina se habían implementado, usualmente a un costo muy alto.
La mayoría de las organizaciones produce políticas de Seguridad de la información derivadas
de la ISO 17799, o si la organización se encuentra ubicada en Estados Unidos, de COBIT, u
ocasionalmente ambos o uno de los estándares. No hay una regla infalible o rápida que dicte
como crear políticas de seguridad de la información, pero en general:
Si la organización cotiza en bolsa en la mayoría de los países, debe tener una política de
seguridad de la información
Si la organización cotiza en bolsa en los Estados Unidos, la organización debe tener una
política de seguridad de la información conforme a los requerimientos SOX, lo que por lo
general implica controles COBIT
Si la organización es propia pero posee cierto número de empleados y desarrolladores,
probablemente necesite una política
Proyectos populares de FOSS, que no son típicamente organizaciones, también deberían
poseer su política de seguridad de la información.
Es perfectamente correcto mezclar y combinar controles de COBIT y de ISO 17799 y casi
cualquier otro estándar de seguridad de la información; rara vez se encuentran en desacuerdo en
los detalles. El método de producción es a veces difícil – si usted “necesita” una política
certificada, necesitara involucrar a firmas calificadas para que ayuden a la organización.
La Posición de OWASP dentro del marco legislativo
El siguiente diagrama muestra donde se ubica OWASP (sustituya con su país y su
legislación, regulaciones y estándares si es que este no se encuentra listado): 

****************************************************************************************************
28

Las organizaciones necesitan establecer una política de seguridad de la información fundada
en legislación nacional relevante, regulación industrial, acuerdos de comercio, y guías de
mejores prácticas complementarias, tales como OWASP. Debido a que resulta imposible dibujar
un pequeño diagrama que contenga todas las leyes y regulaciones relevantes, usted debe asumir
que todas las leyes, estándares, regulaciones, y guías pertinentes no se encuentran listadas –
usted necesitara identificar cuales afectan a su organización, clientes (según corresponda), y
donde la aplicación Serra utilizada.
IANAL: OWASP no es una fuente calificada de consejo legal; usted debe buscar
asesoramiento legal apropiado.
COBIT
COBIT es un marco de gestión de riesgos muy popular que se estructura alrededor de cuatro
dominios:
Planear y organizar
Adquirir e Implementar
Entregar y Dar Soporte
Monitorear y Evaluar

****************************************************************************************************
29

Cada uno de los cuatro dominios posee 13 objetivos de control de alto nivel, tales como DS5
Garantizar la Seguridad de los Sistemas. Cada objetivo de alto nivel contiene un número de
objetivos detallados como por ejemplo 5.2 Identificación, Autenticación y Acceso. Los objetivos
pueden ser cumplidos con una variedad de métodos que es probable que difieran con cada
organización. COBIT es típicamente usado como utilizado como marco de control para SOX, o
como un complemento de los controles de ISO 17799. OWASP no se detiene en los aspectos de
gestión o de negocio de los riesgos de COBIT. Si usted esta implementando COBIT, OWASP es
un excelente punto de partida para identificar riesgos en el desarrollo de sistemas y para asegurar
que aplicaciones hechas a medida o adquiridas cumplimenten con COBIT, pero OWASP no es
una varita mágica para la conformidad con COBIT.
Cuando un objetivo COBIT se cumplimente con un control de OWASP, usted vera “COBIT
XX z.z” para ayudarle a identificar la porción de documentación de COBIT relevante. Estos
controles deberían ser parte de todas las aplicaciones.
Para mayor información sobre COBIT, por favor visite http://www.isaca.org/
ISO 17799
ISO 17799 es un marco de gestión de la Seguridad basado en riesgos que deriva directamente
de los estándares AS/ NZS 4444 y BS 7799. Es un estándar internacional, muy utilizado por la
mayoría de las organizaciones fuera de los Estados Unidos. Aunque algo más raro, algunas
organizaciones en los Estados Unidos también utilizan ISO 17799, particularmente si poseen
subsidiarias fuera del país. Los orígenes de la ISO 17799 se remontan a mediados de los 90, y
algunos de los objetivos de control reflejan esta antigüedad - por ejemplo al llamar a las
interfaces administrativas “puertos de diagnostico”.
Las organizaciones que utilizan ISO 17799 pueden usar OWASP como una guía detallada al
seleccionar e implementar una amplia gama de controles de la ISO 17799, particularmente
aquellos detallados en el capitulo de Desarrollo de Sistemas, entre otros. Cuando un objetivos de
control de 17799 se alcance con un control de OWASP, usted vera “ISO 17799 X.y.z” que le
ayudara a referirse al capitulo relevante de ISO 17799. Estos controles deberían ser parte de
todas las aplicaciones. 

****************************************************************************************************
30

Para mayor información al respecto de ISO 17799, por favor visite
http://www.iso17799software.com/ y las normas pertinentes, tales como Estándares Australia
(http://www.standards.com.au/), Estándares Nueva Zelanda (http://www.standards.co.nz/),
o British Standards International
(http://www.bsi-global.com/).

Sarbanes-Oxley
Un motivador importante para muchas organizaciones en Estados Unidos para adoptar
controles OWASP es para asistir con el cumplimento de Sarbanes-Oxley. Si una organización
siguiera cada control listado en este documento, no le garantizaría la conformidad con SOX.
Esta Guía puede ser utilizada como un control adecuado para la adquisición de aplicaciones o
para desarrollos internos, como parte de un programa de cumplimiento más extenso.
Sin embargo, el cumplimento con requerimientos SOX es utilizado a veces como una
cubierta necesaria por gerentes de Tecnología de la información que no poseían recursos
suficientes, para implementar controles de seguridad que fueron descuidados por largo tiempo,
por lo que resulta importante comprender que es lo que SOX realmente requiere. Un resumen de
la sección 404 de SOX, obtenida de la página Web de AICPA
(http://www.aicpa.org/info/sarbanes_oxley_summary.htm) establece:
Sección 404: Administración del Establecimiento de Controles Internos
Requiere que cada reporte anual de un emisor contenga un “informe de controles internos”
que debe
Establecer la responsabilidad de la gerencia por el establecimiento y mantenimiento de una
adecuada estructura de controles internos y procedimientos para elaborar reportes financieros; y
Contener una evaluación, completada al final del año fiscal del emisor, de la efectividad de la
estructura de control y de los procedimientos de control interno para la elaboración de los
informes financieros.
Esto esencialmente dice que la gerencia debe establecer y mantener estructuras de control
internas y procedimientos de carácter financiero, y una evaluación anual de que los controles
son efectivos. Debido a que los informes financieros no se mantienen ya en libros contables de
“Doble Entrada”, el cumplimiento con requerimientos SOX normalmente se extiende al área de
Tecnología de la información. 

****************************************************************************************************
31

La Guía puede asistir con el cumplimiento de SOX, al proveer controles efectivos para todas
las aplicaciones, y no solo para el propósito de reportes financieros. Permite a las organizaciones
comprar productos que afirman usar controles OWASP, o permitir a las organizaciones exigir a
las empresas de desarrollo de software que deben utilizar controles OWASP para producir
software más seguro.
Sin embargo, SOX no debe ser utilizado como una excusa. Los controles SOX son necesarios
para prevenir otro ENRON, no para comprar artilugios que pueden o no ayudar. Todos los
controles, sean artilugios comprados, capacitación, controles de código, o cambios de proceso,
deben ser seleccionados basado en eficacia cuantificable y la habilidad para manejar el riesgo, y
no “marcar todas las casillas”.
Metodología de Desarrollo
Las grandes empresas de software han elegido una metodología de desarrollo y estándares de
codificación. La elección de una metodología de desarrollo no es tan importante como el simple
hecho de poseer una.
El desarrollo Ad hoc no es lo suficiente estructurado para producir aplicaciones seguras. Las
Organizaciones que desean producir código seguro consistentemente necesitan una metodología
que soporte dicho objetivo.
Usted debe elegir la metodología adecuada – los equipos pequeños nunca deberían tomar en
consideración metodologías demasiado complejas que identifiquen demasiados roles diferentes.
Equipos más grandes deberían elegir metodologías a escala de sus necesidades.
Las características a buscar en una metodología de desarrollo son:
Fuerte aceptación de diseño, testeo y documentación
Espacios donde se puedan insertan controles de seguridad (tales como análisis de riesgo de
amenazas, revisiones por parte de pares, revisiones de código, etc.)
Funciona para el tamaño y nivel de maduración de la organización
Tiene el potencial de reducir la tasa actual de errores y de mejorar la productividad de los
desarrolladores.
Estándares de Codificación 

****************************************************************************************************
32

Una metodología no es un estándar de codificación; cada empresa de software necesitara
determinar que utilizar basado en prácticas comunes, o simplemente cumplir la ley basado en
mejores prácticas conocidas.
Ítems a considerar:
Orientación de arquitectura (por ejemplo “la capa Web no debe llamar a la base de datos
directamente”)
Niveles mínimos de documentación requerida
Requerimientos de testeo mandatarios
Niveles mínimos de comentarios entre código y estilo de comentarios preferidos
Manejo de excepciones
Uso de flujo de bloques de control (por ejemplo “Todos los usos de flujos condicionales
deben usar bloques de sentencias específicos”)
Método de nombramiento preferido para variables, funciones, clases y tablas.
Código mantenible y legible es preferido ante código inteligente o complexo
El estilo del guión y tabulado es una guerra santa, pero desde el punto de vista de la
seguridad, simplemente no importan tanto. Sin embargo, debe destacarse que no usamos más
terminales 80x24, así que el uso de espacio vertical ya no es tan importante como lo era antes. El
guión y tabulado pueden ser “corregidos” utilizando herramientas automáticas o simplemente un
estilo del editor de código, por lo tanto no se ponga demasiado exigente en este tema.
Control de Código Fuente
 La ingeniería de software de alto rendimiento requiere mejoras frecuentes al código,
junto con regimenes de testeo asociados. Todo el código y testeos deben poder ser revertidos y
versionados.
Esto se puede hacer copiando carpetas a un servidor de documentos, pero es mejor si se
utilizan herramientas de revisión de código, tales como Subversion, CVS, SourceSafe, o
ClearCase.
 ¿Por que incluir testeos en una revisión? Los testeos para las versiones de código
posteriores no se ajustan a los testeos requeridos por las versiones de código iniciales. Es vital
que se aplique un testeo a la versión de código para el cual fue construido. 

****************************************************************************************************
33

Principios de codificación segura
Sumario
Arquitectos y proveedores de soluciones necesitan una guía para producir aplicaciones
seguras por diseño, y pueden hacerlo no sólo implementando los controles básicos documentados
en el texto principal, sino también refiriéndose al subyacente “¿Por qué?” en esos principios. Los
principios de seguridad tales como confidencialidad, integridad, y disponibilidad – aunque son
importantes, amplios y vagos – no cambian. Su aplicación será más robusta cuanto más los
aplique.
 Por ejemplo, es correcto cuando en una implementación de validación de datos se incluye
una rutina de validación centralizada para todas las entradas. Sin embargo, es mejor ver una
validación a cada nivel para todas las entradas del usuario, asociadas con un apropiado manejo
de errores y un robusto control de accesos.
En el último año más o menos, ha habido un esfuerzo significante para estandarizar la
terminología y taxonomía. Esta versión de la guía ha normalizado sus principios con aquellos de
los grandes textos de la industria, mientras se han abandonado un principio o dos presentes en la
primera edición de la Guía. Se ha hecho así para prevenir confusión e incrementar la
conformidad con un conjunto de principios fundamentales. Los principios que han sido
eliminados están adecuadamente cubiertos por controles dentro del texto.
Clasificación de activos
La selección de controles sólo es posible después de clasificar los datos a proteger. Por
ejemplo, controles aplicables a sistemas de bajo valor tales como blogs y foros son diferentes al
nivel y número de controles adecuados para la contabilidad, sistemas de alto valor de banca y
comercio electrónico
Sobre los atacantes
En el diseño de controles para prevenir el mal uso de su aplicación, debe considerar los
atacantes más probables (en orden de posibilidades y pérdidas actualizadas de más a menos):
Equipo o desarrolladores descontentos.
Ataques “Accionados por” como efectos secundarios o consecuencias directas de un virus, o
ataque de gusano o troyano. 

****************************************************************************************************

34

Principios de codificación segura
Sumario
Arquitectos y proveedores de soluciones necesitan una guía para producir aplicaciones
seguras por diseño, y pueden hacerlo no sólo implementando los controles básicos documentados
en el texto principal, sino también refiriéndose al subyacente “¿Por qué?” en esos principios. Los
principios de seguridad tales como confidencialidad, integridad, y disponibilidad – aunque son
importantes, amplios y vagos – no cambian. Su aplicación será más robusta cuanto más los
aplique.
 Por ejemplo, es correcto cuando en una implementación de validación de datos se incluye
una rutina de validación centralizada para todas las entradas. Sin embargo, es mejor ver una
validación a cada nivel para todas las entradas del usuario, asociadas con un apropiado manejo
de errores y un robusto control de accesos.
En el último año más o menos, ha habido un esfuerzo significante para estandarizar la
terminología y taxonomía. Esta versión de la guía ha normalizado sus principios con aquellos de
los grandes textos de la industria, mientras se han abandonado un principio o dos presentes en la
primera edición de la Guía. Se ha hecho así para prevenir confusión e incrementar la
conformidad con un conjunto de principios fundamentales. Los principios que han sido
eliminados están adecuadamente cubiertos por controles dentro del texto.
Clasificación de activos
La selección de controles sólo es posible después de clasificar los datos a proteger. Por
ejemplo, controles aplicables a sistemas de bajo valor tales como blogs y foros son diferentes al
nivel y número de controles adecuados para la contabilidad, sistemas de alto valor de banca y
comercio electrónico
Sobre los atacantes
En el diseño de controles para prevenir el mal uso de su aplicación, debe considerar los
atacantes más probables (en orden de posibilidades y pérdidas actualizadas de más a menos):
Equipo o desarrolladores descontentos.
Ataques “Accionados por” como efectos secundarios o consecuencias directas de un virus, o
ataque de gusano o troyano. 


****************************************************************************************************
35

necesitan superar cierta cantidad de coches y tráfico a pie, pero también ciclones, terremotos,
fuegos, accidentes de tráfico e inundaciones. Los diseñadores de aplicaciones deben superar
eventos extremos como fuerza bruta o ataques de inyección y fraude. Los riesgos de los
diseñadores de aplicaciones son bien conocidos. Los días de “no lo sabíamos” ya han pasado.
La seguridad ahora es algo esperado, y no un caro complemento o algo dejado de lado.
La arquitectura de seguridad se refiere a los pilares fundamentales: la aplicación debe
proporcionar controles para proteger la confidencialidad de la información, integridad de los
datos, y proporcionar acceso a los datos cuando se requiera (disponibilidad) – y solamente a los
usuarios apropiados. La arquitectura de seguridad no es una “markitecture”, donde una
cornucopia de productos de seguridad son lanzados juntos y denominados como “solución”, no
son más que un conjunto de características cuidadosamente consideradas, controles, procesos
seguros, y una postura de seguridad por defecto.
Cuando se empieza una nueva aplicación o se rediseña una aplicación existente, debería
considerar cada característica funcional y tener en cuenta:
¿Son los procesos de alrededor de esta característica lo más seguro posibles? En otras
palabras, ¿es este un proceso con defectos?
¿Si fuera malvado, cómo abusaría de esta característica?
¿Se requiere esta característica que este activa por defecto? Si es así, ¿existen límites u
opciones que ayuden a reducir el riesgo de esta característica?
Andrew van der Stock llamo al proceso anterior “Thinking Evil™”, y recomienda ponerse en
el lugar de el atacante y pensar en todas las posibles vías en que se puede abusar de cada
característica, sin considerar los tres pilares básicos y usando el modelo STRIVE sucesivamente.
. Siguiendo esta guía, y usando el modelo de riesgo de amenazas STRIDE / DREAD
discutido aquí y en el libro de Howard y LeBlanc, irá bien en su camino de adoptar formalmente
una arquitectura de seguridad para sus aplicaciones.
El mejor diseño de sistema de arquitectura y documentos de diseño detallados contienen
discusiones de seguridad en cada característica, cómo se van a reducir los riesgos, y cómo se
hacía actualmente la codificación.
La arquitectura de seguridad empieza el día en que se modelan los requisitos del negocio, y
no termina nunca hasta que la última copia de su aplicación es retirada. La seguridad es un
proceso de larga vida y no un disparo por accidente. 

****************************************************************************************************
36

Principios de Seguridad
Estos principios de Seguridad han sido tomados de la edición previa de la guía OWASP y se
han normalizado con los principios de seguridad perfilados en el excelente libro Escribiendo
código seguro de Howard y LeBlanc.
Minimizando el área de la superficie de ataque
Cada característica que se añade a una aplicación añade una cierta cantidad de riesgo a la
aplicación total. El objetivo del desarrollo seguro es reducir el total del riesgo reduciendo el área
de la superficie de ataque.
Por ejemplo, una aplicación web implementa ayuda online con una función de búsqueda. La
función de búsqueda puede ser vulnerable a ataques de inyección SQL. Si la característica de
ayuda se hubiera limitado a usuarios autorizados, la probabilidad del ataque se hubiera reducido.
Si la característica de ayuda de la función de búsqueda fuera introducida a través de rutinas
de validación de datos centralizadas, la habilidad para realizar ataques de inyección SQL se
hubiera reducido dramáticamente. Sin embargo, si la característica de ayuda fuera re-escrita para
eliminar la función de búsqueda (por una interfaz de usuario mejorada, por ejemplo), esto
eliminaría al menos el área de ataque, incluso si la característica de ayuda estuviera disponible
para toda Internet.
Seguridad por defecto
Hay muchas maneras de entregar una experiencia “out of the box” a los usuarios. Sin
embargo, por defecto, la experiencia debería ser segura, y debería depender del usuario el reducir
su seguridad – si les está permitido.
Por ejemplo, por defecto, debe habilitarse la complejidad de la contraseña y su duración. A
los usuarios se les puede permitir deshabilitar esas dos características para simplificar su uso de
la aplicación e incrementar su riesgo.
Principio del mínimo privilegio
El principio del mínimo privilegio recomienda que las cuentas tengan la mínima cantidad de
privilegios necesarios para realizar sus procesos de negocio. Esto abarca a los derechos de
usuario, permisos de recursos tales como límites de CPU, memoria, red y permisos del sistema
de ficheros. 

****************************************************************************************************
37

Por ejemplo, si un servidor middleware requiere acceso sólo a la red, acceso de lectura a la
tabla de una base de datos, y la habilidad para escribir en un log, esto describe todos los permisos
que deben concederse. Bajo ninguna circunstancia debería darse privilegios administrativos al
middleware.
Principio de defensa en profundidad
El principio de defensa en profundidad sugiere que donde con un control sería razonable,
más controles contra diferentes tipos de riesgo serían mayores. Los controles, cuando se utilizan
en profundidad, pueden hacérselo extraordinariamente difícil a severas vulnerabilidades y por lo
tanto con poca probabilidad de que ocurran. Con la codificación segura, esto puede tomar la
forma de validación basada en filas, controles de auditoria centralizados, y requerir a los usuarios
hacer login en todas las páginas.
Por ejemplo, una interfaz administrativa con defectos es poco probable que sea vulnerable a
ataques anónimos si incorpora el acceso correctamente a redes de administración en producción,
chequea la autorización administrativa del usuario, y hace log de todos los accesos.
Fallar de manera segura
Las aplicaciones fallan regularmente al procesar transacciones debido a diversas razones. De
la manera en que fallan se puede determinar si una aplicación es segura o no. Por ejemplo:
isAdmin = true;
try {
 codeWhichMayFail();
 isAdmin = isUserInRole( “Administrator” );
}
catch (Exception ex) {
 log.write(ex.toString());
}
Sí el código codeWhichMayFail() falla, el usuario es administrador por defecto. Obviamente
esto es un riesgo de seguridad.
Los sistemas externos son inseguros
Diversas organizaciones utilizan las capacidades de procesamiento de terceras compañías, las
cuales más que a menudo tienen diferentes políticas de seguridad y posturas que la suya. Es 

****************************************************************************************************
38

poco probable que pueda controlar o influenciar en una tercera parte externa, si ellas son usuarios
domésticos o grandes suministradores o socios.
De ahí que, la confianza implícita de ejecutar sistemas externos, no está garantizada. Todos
los sistemas externos deberían ser tratados de un modo similar.
Por ejemplo, un fiel proveedor de programas proporciona datos que son utilizados para la
Banca en Internet, proporciona el número de puntos de premio y una pequeña lista de objetos
potenciales de reembolso. Sin embargo, los datos deberían ser comprobados para asegurarse que
es seguro mostrarlo al usuario final, y que los puntos de premio son un número positivo, y no
improbablemente largo.
Separación de funciones
Un control clave del fraude es la separación de funciones. Por ejemplo, alguien que solicita
un ordenador no puede anunciarlo también, no debería recibir directamente el ordenador. Esto
previene que el usuario solicite varios ordenadores y reclame que nunca le llegaron.
Ciertos roles tienen niveles diferentes de confianza que los usuarios normales. En particular,
los administradores son diferentes que los usuarios normales. En general, los administradores no
deberían ser usuarios de la aplicación.
Por ejemplo, un administrador debería ser capaz de apagar y encender el sistema, configurar
políticas de contraseñas pero no debería ser capaz de hacer login en la aplicación como un super
usuario privilegiado, que fuera capaz de “comprar” objetos en nombre de otros usuarios.
No confíes en la seguridad a través de la oscuridad
La seguridad a través de la oscuridad es un control de seguridad débil, y además siempre
fallan cuando son el único control. Esto no significa que mantener secretos es una mala idea,
significa simplemente que la seguridad de los sistemas clave no debería basarse en mantener
detalles ocultos.
Por ejemplo, la seguridad de una aplicación no debería basarse en mantener en secreto el
conocimiento del código fuente. La seguridad debería basarse en muchos otros factores,
incluyendo políticas razonables de contraseñas, defensa en profanidad, límites en las
transacciones de negocios, arquitectura de red sólida, y controles de auditoria y fraude.
Un ejemplo práctico es Linux. El código fuente de Linux está ampliamente disponible, y aún
así está asegurado apropiadamente. Linux es un sistema operativo resistente, seguro y robusto. 


****************************************************************************************************
39

Simplicidad
El área de la superficie de ataque y la simplicidad van de la mano. Ciertos ingenieros de
software prefieren aproximaciones demasiado complejas hacia lo que de otra manera sería un
código relativamente sencillo y simple.
Los desarrolladores deben evitar el uso de dobles negaciones y complejas arquitecturas en
donde un enfoque simple sería más rápido y simple.
Por ejemplo, aunque pueda estar a la última tener unas cuantas entidades sencillas
ejecutándose en un servidor separado, es más seguro y rápido usar simplemente variables
globales con un mecanismo apropiado de mutex para proteger contra las condiciones de carrera.
Arreglar cuestiones de seguridad correctamente
Una vez que un fallo de seguridad ha sido identificado, es importante desarrollar un test para
él y comprender la raíz del problema. Cuando se usan los patrones de diseño, es muy probable
que el fallo de seguridad se encuentre muy extendido en todo el código base, por lo que
desarrollar la solución correcta sin introducir regresiones es esencial.
Por ejemplo, un usuario ha visto que es capaz de ver las cuentas de otro usuario simplemente
ajustando su cookie. La solución parece ser relativamente sencilla, pero como el manejo de la
cookie es compartido entre todas las aplicaciones, un cambio en una simple aplicación
repercutirá en todas las demás. La solución por lo tanto debe testearse en todas las aplicaciones
afectadas. 

****************************************************************************************************
40

Modelado de Riesgo de Amenaza
Durante el diseño de su aplicación, es esencial que la diseñe utilizando controles evaluados
de riesgo de amenaza, de otra forma malgastara recursos, tiempo y dinero en controles inútiles y
no suficiente en los riesgos reales.
El método que utilice para determinar riesgo no es tan importante como hacer modelado de
riesgo de amenaza estructurado. Microsoft señala que la mejora sencilla en su programa de
mejora de seguridad fue la adopción universal de modelado de amenaza.
OWASP ha elegido el proceso de modelado de amenaza de Microsoft ya que trabaja bien
para los retos únicos enfrentando seguridad en aplicaciones, y es fácil de aprender y adoptar por
diseñadores, desarrolladores y revisores de código.
Modelado de Amenaza de Riesgo utilizando el Proceso de Modelado de Amenaza de
Microsoft
Modelado de amenaza es un proceso esencial para el desarrollo de aplicaciones web seguras.
Permite a las organizaciones determinar el control correcto y producir contramedidas efectivas
dentro del presupuesto. Por ejemplo hay poco sentido en agregar un controlo de $100,000 a un
sistema que tiene fraude insignificante.
Ejecutando modelado de riesgo de amenazas
Hay cinco pasos en el proceso de modelado. Microsoft provee una herramienta de modelado
de riesgo escrita en .NET para ayudar con el seguimiento y visualización de árboles de
amenazas. Podría encontrar el uso de está herramienta útil para proyectos más largo y de larga de
vida.
Flujo del Modelo de Amenaza 

****************************************************************************************************
41

Identificar Objetivos de Seguridad
El negocio (o líder de la organización) en coordinación con el equipo de desarrollo necesita
entender los probables objetivos de seguridad. Los objetivos de seguridad en aplicaciones
necesitan ser divididos en:
Identidad: ¿protege está aplicación al usuario de mal uso? ¿Hay controles adecuados para
asegurar evidencia de identidad (requerido para muchas aplicaciones bancarias)?
Reputación: la pérdida de reputación derivada de la aplicación siendo mal usada o atacada
exitosamente 

****************************************************************************************************
42

Financiero: el nivel de riesgo que la organización esta preparada para tomar en la
remediación de potencial pérdida financiera. Un software de foros tendría menor riesgo
financiero que la banca por Internet de un corporativo
Privacidad y regulaciones: en que medida las aplicaciones deben proteger la información del
usuario. Software de foros es público por naturaleza, pero un programa de impuestos esta
intrínsecamente vinculado a las regulaciones y legislación de privacidad en la mayoría de los
países
Disponibilidad de garantías: ¿tiene este software que estar disponible por un SLA o un
acuerdo similar? ¿Es infraestructura protegida nacionalmente? ¿A que nivel tiene que estar
disponible la aplicación? Aplicaciones y técnicas altamente disponibles son extraordinariamente
caras, así que la fijación de controles correctos puede ahorrar una gran cantidad de recursos y
dinero.
Esto de ninguna manera es una lista exhaustiva pero da una idea de algunas de las decisiones
de riesgo de negocio que lleva a la construcción de controles técnicos. Otras fuentes de
orientación vienen de:
Leyes (Como leyes de privacidad o financieras)
Regulaciones (como regulaciones bancarias o de negocios electrónicos)
Estándares (como ISO 17799)
Acuerdos Legales (como acuerdos mercantes)
Políticas de Seguridad de la información
Visión General de la Aplicación
Una vez que los objetivos han sido definidos, la aplicación debería ser analizada para
determinar:
Componentes
Flujos de datos
Límites de confianza
La mejor manera de hacer esto es obtener la documentación de arquitectura y diseño de la
aplicación.
Busque diagramas de componentes UML. Los diagramas de componentes de alto nivel son
generalmente todo lo que se requiere para entender como y porque la información fluye a
distintos lugares. Información que cruza un límite de confianza (como desde el Internet al código 

****************************************************************************************************
43

de la interfaz o desde la lógica de negocio al servidor de base de datos), necesita ser analizado
cuidadosamente, mientras que los flujos dentro del mismo nivel de confianza no necesitan tanto
escrutinio.
Descomponer la aplicación
Una vez que la arquitectura de la aplicación es entendida, la aplicación necesita ser
descompuesta, esto significa que las características y módulos que tienen un impacto de
seguridad necesitan ser descompuestas. Por ejemplo, cuando se investiga el módulo de
autenticación, es necesario entender como los datos entran al módulo de autenticación, como el
módulo valida y procesa la información, a donde fluyen los datos, si la información es guardada,
y que decisiones son hechas por el módulo.
Documentar las amenazas conocidas
Es imposible escribir amenazas desconocidas, y es poco probable para muchos sistemas
personalizados que un nuevo malware sea creado para hacer frente a nuevas vulnerabilidades. En
cambio, concéntrese en los riesgos que son conocidos, que pueden ser fácilmente demostrados
utilizando herramientas o el seguimiento de errores.
Cuando documente una amenaza, Microsoft sugiere dos enfoques diferentes. Uno es un
gráfico de amenaza y el otro es simplemente una lista estructurada. Típicamente, un gráfico de
amenaza imparte mucha más información en un periodo de tiempo más corto para el lector pero
lleva mayor tiempo para construirse, y la lista estructurada es mucho más fácil de escribir pero
lleva más tiempo para el impacto de las amenazas hacerse obvias. 

****************************************************************************************************

44

1. Un atacante podría leer los mensajes de otros usuarios
El usuario tal vez no haya terminado sesión en una computadora compartida
2. Validación de datos puede permitir inyección SQL
3. Implementar validación de datos
4. Autorización puede fallar, permitiendo acceso no autorizado
5. Implementar revisiones de autorización
6. Caché del navegador puede contener parte del mensaje
7. Implementar cabeceras HTTP anti-caché
8. Si el riesgo es alto, usar SSL
Las amenazas son atacantes motivados, ellos generalmente quieren algo de su aplicación o
burlar controles. Para entender que amenazas son aplicables, utilice los objetivos de seguridad
para entender quien podría atacar la aplicación:
Descubrimiento accidental: Usuarios autorizados pueden toparse con un error en la lógica de
su aplicación utilizando simplemente un navegador
Malware automatizado (buscando vulnerabilidades conocidas pero con un poco de malicia e
inteligencia)
Atacante Curioso (como investigadores de seguridad o usuarios que notaron algo mal en su
aplicación y prueban más allá)
Script kiddie: criminales computacionales atacando o desfigurando aplicaciones por respeto o
motivos políticos – utilizando técnicas descritas aquí o en la Guía de Pruebas de OWASP para
comprometer su aplicación
Atacantes motivados (como personal disgustado o un atacante pagado)
Crimen organizado (generalmente para aplicaciones de alto riesgo, como comercio
electrónico o bancario
Es vital entender el nivel del atacante contra el que se esta defendiendo. Un atacante
informado que entiende sus procesos es mucho más peligroso que un script kiddie, por ejemplo.
STRIDE
Burlando Identidad
Burlar identidad es un riesgo clave para las aplicaciones que tienen muchos usuarios pero un
contexto de ejecución simple a nivel aplicación y base de datos. Los usuarios no deben ser
capaces de actuar como otro usuario o convertirse en otro usuario. 

****************************************************************************************************
45

Manipulación de información
Los usuarios pueden cambiar cualquier información entregada a ellos, y por lo tanto pueden
cambiar validación del lado del cliente, datos GET y POST, cookies, cabeceras HTTP, y más. La
aplicación no debería enviar información al usuario, como tasas de interés o periodos que son
obtenibles de la aplicación misma. La aplicación debe revisar cuidadosamente cualquier
información recibida del usuario para identificar si es sensata y aplicable.
Repudiación
Los usuarios pueden disputar transacciones si hay trazabilidad y auditoria insuficiente de la
actividad del usuario. Por ejemplo, si un usuario dice, “yo no transferí dinero a está cuenta
externa”, y usted no puede seguir sus actividades desde el frente al dorso de la aplicación, es
extremadamente posible que la transacción tendrá que deshacerse.
Las aplicaciones deberían tener controles de repudiación adecuados, como registros de
accesos web, pistas de auditorias en cada nivel, y un contexto de usuario desde arriba hacia
abajo. Preferentemente, la aplicación debería correr como el usuario, pero esto comúnmente no
es posible con muchos marcos.
Divulgación de Información
Los usuarios se resisten a enviar detalles privados a un sistema. Es posible para un atacante
revelar detalles de usuario, ya sea anónimamente o como un usuario autorizado, habrá un periodo
de reputación perdido. Las aplicaciones deben incluir controles fuertes para prevenir
manipulación de identificación de usuario, particularmente cuando ellos usan una única cuenta
para correr la aplicación entera.
El navegador del usuario puede fugar información. No todos los navegadores implementan
correctamente políticas de manejo de caché pedidos por las cabeceras HTTP. Cada aplicación
tiene la responsabilidad de minimizar la cantidad de información almacenada por el navegador,
previendo que pueda divulgar información y pueda ser utilizada por un atacante para aprender
más acerca del usuario o convertirse en ese usuario.
Denegación de Servicio
Las aplicaciones deberían estar conscientes que podrían ser objeto de un ataque de
denegación de servicio. Para aplicaciones autenticadas, recursos costosos como archivos
grandes, cálculos complejos, búsquedas pesadas, o consultas largas deberían estar reservadas
para usuarios autorizados, no para usuarios anónimos. 

****************************************************************************************************
46

Para aplicaciones que no tienen este lujo, cada faceta de la aplicación deber ser
implementada para realizar el menos trabajo posible, usar (o no) consultas rápidas a la base de
datos, y no exponer archivos grandes, o proveer ligas únicas por usuario para prevenir un ataque
simple de denegación de servicios.
Elevación de Privilegios
Si una aplicación provee roles de usuario y administrador, es vital asegurarse que el usuario
no puede elevarse a algún rol de privilegios más altos. En particular, simplemente no proveer las
ligas al usuario es insuficiente – todas las acciones deben estar cerradas a través de una matriz de
autorización para asegurarse que solamente los roles correctos pueden acceder funcionalidades
privilegiadas.
DREAD
DREAD es usado para formar parte del razonamiento detrás de la clasificación de riesgos, y
es usada directamente para ordenar riesgos.
DREAD es usado para computar un valor de riesgo, que es un promedio de cinco elementos:
RiskDREAD = (DAÑO + REPRODUCIBILIDAD + EXPLOTABILIDAD + usuarios
AFECTADOS + DESCUBRIBILIDAD) / 5
Esto produce un número entre 0 y 10. Mientras más alto el número, más serio es el riesgo.
Daño Potencial
Si una amenaza es cumplida, ¿cuánto daño es causado? 

0 = Nada 5 = Información
individual del usuario es
comprometida o afectada
10 = Destrucción
completa del sistema 

Reproducibilidad
¿Qué tan fácil es reproducir esta amenaza? 
0 = Muy difícil o
imposible, incluso para los
administradores de la
aplicación
5 = uno o dos pasos
requeridos, tal vez necesite
ser un usuario autorizado
10 = Requiere sólo una
barra de direcciones sin
estar registrado en la
aplicación 

****************************************************************************************************
47

Explotación
¿Qué necesita tener para explotar esta amenaza?
0 = Habilidades 5 = Malware existente, 10 = Solamente un 
avanzadas de programación
y redes, herramientas de
ataque avanzadas o
personalizadas
o fácilmente realizado
utilizando herramientas
normales de ataque
navegador 

Usuarios Afectados
¿Cuántos usuarios serán afectados por esta amenaza?
0 = Ninguno 5 = Algunos usuarios,
pero no todos
10 = Todos los usuarios 

Descubrimiento
¿Qué tan fácil es descubrir esta amenaza? Cuando se está realizando una revisión de código
de una aplicación existente, la facilidad para descubrirla es usualmente establecida como 10 ya
que se tiene que asumir que estas cuestiones serán descubiertas.
0 = De muy difícil a
imposible. Requiere acceso
al sistema o al código
5 = Se podría dar con el
problema de estar
adivinando u observando
las huellas de la red
9 = Detalles de fallas
como esta son del dominio
público, y pueden ser
descubiertas utilizando
Google
10 = Está en la barra de
direcciones o en una forma


Sistemas Alternativos de Modelado de Amenazas
OWASP reconoce que la adopción de un proceso de modelado de Microsoft puede ser una
elección controversial en algunas organizaciones. Si STRIDE / DREAD es inaceptable debido a
prejuicio infundado, recomendamos que cada organización juzgue los varios modelos de
amenaza en una aplicación o diseño existente. Esto permitirá a la organización determinar que
enfoque funciona mejor para ellos, y adoptar las herramientas de modelado de amenaza más
apropiada para sus organizaciones.
Realizar modelado de amenazas provee un retorno mucho mayor que cualquier control en esta
Guía. Es vital que el modelado de amenaza se lleve acabo

****************************************************************************************************
48

Trike
Trike es un marco de modelado de amenaza con similitudes al proceso de modelado de
amenaza de Microsoft. Sin embargo, Trike se diferencia utilizando un enfoque basado en el
riesgo con implementación, modelos de amenaza y riesgo distintos, en vez de utilizar un modelo
de amenaza mixto (ataques, amenazas y debilidades) como se representan por STRIDE /
DREAD.
Del papel de Trike, Trike tiene por objeto:
Con ayuda de los interesados del sistema, asegurar que el riesgo que este sistema implica a
cada activo es aceptable para todos los interesados.
Ser capaz de decir si esto se ha hecho.
Comunicar que hemos hecho y sus efectos a los interesados
Potenciar a los interesados para entender y reducir los riesgos para si mismos y para otros
interesados implicados por sus acciones dentro de sus dominios.
Para mayor información, por favor revise debajo la sección “Otra lectura”. La Guía de
OWASP 2.1 (en Noviembre 2005) tendrá mayor detalle acerca de Trike.
AS/NZS 4360:2004 De Gestión de Riesgos
Estándar Australiano / Estándar neocelandés AS/NZS 4360, publicado por primera vez en
1999, es el primer estándar formal del mundo para documentar y gestionar riesgo, y es todavía
uno de los pocos estándares formales para gestionar riesgo. Fue actualizado en 2004.
El enfoque del AS/NZS 4360 es simple (es sólo de 28 páginas) y flexible, y no bloquea a las
organizaciones en un método en particular de gestión de riesgo siempre y cuando la gestión de
riesgo cumpla los cinco pasos del AS/NZS 4360. Provee varios conjuntos de tablas de riesgo y
permite a las organizaciones adoptar el suyo propio.
Los cinco componentes principales del enfoque iterativo del AS/NZS son:
Establecer el contexto – establecer que es un riesgo tratado, por ejemplo, que bienes /
sistemas son importantes
Identificar los riesgos – dentro de sistemas a ser tratados, ¿qué riesgos son aparentes?
Analizar los riesgos – ver estos riesgos y determinar si hay algunos controles de apoyo
Evaluar los riesgos – determinar el riesgo residual
Tratar los riesgos – describir los métodos para tratar los riesgos para que los riesgos
seleccionados por el negocio puedan ser mitigados 

****************************************************************************************************
49

AS/NZS 4360 asume que el riesgo será manejado por un estilo de riesgo operativo de grupo,
y que la organización cuenta con conocimientos adecuados en casa, y grupos de gestión de riesgo
para identificar, analizar y tratar los riesgos.
Porque usaría AS/NZS 4360:
AS/NZS 4360 trabaja bien como una metodología de gestión de riesgos para organizaciones
que requieren cumplimiento con la ley Sarbanes-Oxley.
AS/NZS 4360 trabaja bien para organizaciones que prefieren manejar riesgos en una forma
tradicional como utilizar probabilidad y consecuencia para determinar el riesgo global.
AS/NZS 4360 es familiar para la mayoría de los gestores de riesgo alrededor del mundo, y su
organización tal vez ya haya implementado un enfoque compatible al AS 4360
Son una organización australiana, y por lo tanto pueden estar obligado a usarlo si son
auditados externamente de manera periódica, o justificar porque no lo están utilizando.
Afortunadamente los modelos STRIDE / DREAD referidos anteriormente son compatibles con
AS/NZS 4360.
Porque no usuaria AS/NZS 4360:
El enfoque AS/NZS 4360 trabaja mucho mejor para negocios o los riesgos sistemáticos que
para los riesgos técnicos
AS/NZS 4360 no discute métodos para realizar un ejercicio de modelado de riesgo de
amenaza estructurado
Ya que AS/NZS 4360 es un marco genérico para gestionar riesgos, no provee ningún método
estructurado para enumerar riesgos de seguridad en aplicaciones Web.
Aunque AS 4360 puede ser utilizado para calificar los riesgos de revisiones de seguridad, la
falta de métodos estructurados para enumerar amenazas para aplicaciones Web lo hace menos
deseable que otros métodos.
CVSS
El Departamento de EEUU de Seguridad nacional (DHS por sus siglas en inglés) estableció
Grupo de Trabajo de Revelación de Vulnerabilidad NIAC, que incorpora aportaciones de Cisco,
Symantec, ISS, Qualys, Microsoft, CERT/CC y eBay. Una de las aportaciones de este grupo es
el Sistema de Marcación de Vulnerabilidades Comunes (CVSS por sus siglas en inglés).
Porque usaría CVSS: 

****************************************************************************************************
50

Usted acaba de recibir una notificación de un investigador de seguridad u otra fuente que su
producto tiene una vulnerabilidad, y desea asegurarse que una calificación de seguridad
confiable como para alertar a sus usuarios del nivel apropiado de acción requerida cuando usted
libere el parche
Usted es un investigador de seguridad, y ha encontrado varias vulnerabilidades en un
programa. Le gustaría usar el sistema de medición CVSS para producir calificaciones de riesgo
confiable, para asegurarse que el ISV tomará las vulnerabilidades en serio al ser comparadas a
sus clasificaciones.
El uso de CVSS es recomendado para usarse por departamentos del gobierno de EEUU para
el trabajo en grupo – no es claro si esto es una política a la hora de escribir.
Porque no usaría CVSS:
CVSS no encuentra o reduce el área de superficie de ataque (por ejemplo, defectos de
diseño), tampoco ayuda a enumerar posibles riesgos de una pieza de código arbitrario ya que no
está diseñado para ese propósito.
CVSS es más complejo que STRIDE / DREAD, ya que apunta a modelar el riesgo de
vulnerabilidades anunciadas como aplican a software liberado.
La clasificación de riesgos de CVSS es compleja – una hoja de cálculo es requerida para
calcular el riesgo ya que el supuesto detrás de CVSS es que un riesgo simple ha sido anunciado,
o un gusano o troyano ha sido liberado orientado a un pequeño número de vectores de ataque.
Los gastos de calcular la clasificación de riesgo de CVSS son bastante alto si es aplicado a
una revisión de código minuciosa, que puede tener 250 o más amenazas por clasificar.
Octave
Octave es un peso pesado de enfoque de Metodología de riesgo del Instituto de Ingeniería de
Software de CMU en colaboración con CERT. OCTAVE no está dirigido a riesgo técnico, sino a
riesgo organizacional.
OCTAVE consiste en dos versiones: OCTAVE – para organizaciones grandes y OCTAVE-S
para organizaciones pequeñas, ambas tienen catálogos de prácticas, perfiles, y hojas de trabajo
para documentar los resultados de OCTAVE. OCTAVE es popular en muchos sitios.
OCTAVE es útil cuando:
Se implementa una cultura de gestión de riesgo y control dentro de una organización
Se documentan y miden riesgos de negocio 

****************************************************************************************************
51

Se documenta y mide riesgos de seguridad global en TI, particularmente cuando son
relacionados a toda la empresa de gestión de riesgo de TI
Se documentan riesgos en torno a sistemas completos
Cuando una organización es madura, no tiene una metodología de riesgo de trabajo puesta en
marcha, y requiere que un marco de gestión de riesgo robusto se ponga en marcha
Las desventajas de OCTAVE son:
OCTAVE es incompatible con AS 4360, ya que fuerza la Probabilidad=1 (es decir, una
amenaza siempre ocurrirá). Esto es también inapropiado para muchas organizaciones. OCTAVES
tiene una inclusión opcional de probabilidad, pero no es parte de OCTAVE.
Consistente de 18 volúmenes, OCTAVE es grande y compleja, con muchas hojas de trabajo
y prácticas para implementar
No provee una lista de prácticas “fuera de la caja” para riesgos de seguridad de aplicaciones
Web
OWASP no espera que OCTAVE sea utilizada por diseñadores o desarrolladores de
aplicaciones, y por lo tanto pierde la razón de ser de un modelado de amenaza – que será
utilizado durante todas las etapas de desarrollo por todos los participantes para reducir el riesgo
de una aplicación volviéndose vulnerable a un ataque.
Comparando enfoques de modelado de amenaza 

Aquí está como aproximadamente CVSS se mide a STRIDE / DREAD:

Métrica | Atributo | Descripción | Lo más cercano a STRIDE / DREAD
Métrica base CVSS
Vector de acceso
¿Acceso remoto o local?
~ Explotación

Métrica base
CVSS
Complejidad de
acceso
Que tan difícil
es reproducir la
explotación
Reproducibilidad
Métrica base
CVSS
Autenticación ¿Anónimo o
Autenticado?
~ Explotación
Métrica base
CVSS
Impacto de
confidencialidad
Brecha de
impacto de
confidencialidad
Divulgación de
Información 

****************************************************************************************************
52

Métrica base
CVSS
Impacto de
Integridad
Brecha de
impacto de
integridad
Forzar
Métrica base
CVSS
Impacto de
disponibilidad
Brecha de
impacto de
disponibilidad del
sistema
Denegación de
Servicios
Métrica base
CVSS
Impacto de
tendencia
¿La tendencia es
igual a CIA, o
predispuesta hacia
una o más de CIA?
No hay
equivalente
Temporal CVSS Explotación ¿Qué tan fácil es
la brecha a explotar?
Explotación
Temporal CVSS Nivel de
reparación
¿Hay una
solución disponible?
No hay
equivalente
Temporal CVSS Confianza del
reporte
¿Qué tan
confiable es el
reporte original de
la vulnerabilidad?
No hay
equivalente
Ambiental
CVSS
Daño Colateral ¿Qué tan malo
sería el daño si la
amenaza fuera
realizada?
Daño potencial
Ambiental
CVSS
Distribución de
objetivo
¿Cuántos
servidores son
afectados si la
amenaza es
realizada?
Usuarios
afectados (no
directamente
equivalente) 

Alternativamente, aquí esta como STRIDE / DREAD se relacionan a CVSS: 

Atributo STRIDE | Descripción | Atributo CVSS más cercano 

****************************************************************************************************
53

Burlando identidad ¿Cómo pueden los
usuarios obviar controles
para convertirse en otro
usuario o actuar como otro
usuario?
No equivalente directo
Manipulación de
información
¿Puede ser la
información manipulada por
un atacante para obviar los
controles de seguridad de la
aplicación o tomar control
de los sistemas subyacentes
(por ejemplo inyecciones
SQL)
Integridad
Repudiación ¿Pueden los usuarios
rechazar transacciones
debido a la falta de
trazabilidad dentro de la
aplicación
No equivalente directo
Divulgación de
información
¿Pueden los controles
de autorización ser
obviados, lo que llevaría
información sensible a ser
expuesta que no debería
suceder?
Confidencialidad
Denegación de
Servicios
¿Puede un atacante
prevenir que usuarios
autorizados accedan el
sistema?
Disponibilidad
Elevación de Privilegios ¿Puede un atacante
anónimo convertirse en un
usuario, o un usuario
No equivalente directo 

****************************************************************************************************
54

autenticado actuar como un
administrador o cambiar a
un rol con más privilegios?
Atributo DREAD Descripción... si la
amenaza es realizada
Atributo CVSS más
cercano
Daño potencial ¿Qué daño podría
ocurrir?
Daño colateral
Reproducibilidad ¿Qué tan fácil es para
un ataque potencial
funcionar?
~ Complejidad de
acceso
Explotación ¿Qué necesita (esfuerzo,
conocimientos técnicos)
para hacer que el ataque
funcione?
Explotación
Usuarios afectados ¿Cuántos usuarios
serían afectados por el
ataque?
Objetivo de distribución
Descubrimiento ¿Qué tan fácil es para
un atacante descubrir la
cuestión?
No equivalente directo

En general, CVSS es útil para software liberado y el número de vulnerabilidades realizadas
son pequeñas. CVSS debería producir calificaciones de riesgos similares independientemente del
revisor, pero muchas de las tendencias construidas en el cálculo del riesgo global son subjetivas
(es decir local y remoto o que aspecto de la aplicación es más importante), y por lo tanto tal vez
haya desacuerdos en la calificación del riesgo resultante.
STRIDE/DREAD son útiles para reducir el área de superficie del ataque, mejorar el diseño, y
eliminar vulnerabilidades antes de que sean liberadas. También puede ser utilizado por revisores
para calificar y enumerar amenazas en una forma estructurada, y produce calificaciones de riesgo
similares independientemente del revisor. 

****************************************************************************************************
55
Conclusión
En las pocas páginas anteriores, hemos tocado los principios básicos de seguridad en
aplicaciones Web. Aplicaciones que honran la intención subyacente de estos principios será más
segura que sus contrapartes que cumplen al mínimo con controles específicos mencionados más
tarde en está Guía.
Lectura Adicional
Microsoft, Threat Modeling Web Applications, © 2005 Microsoft
http://msdn.microsoft.com/security/securecode/threatmodeling/default.aspx?pull=/library/enus/dnpag2/html/tmwa.asp

Microsoft, Threats and Countermeasures, © 2003 Microsoft
Howard and LeBlanc, Writing Secure Code, 2nd Edition, pp 69 – 124, © 2003 Microsoft
Press, ISBN 0-7356-1722-8
Meier et al, Improving Web Application Security: Threats and Countermeasures, © 2003
Microsoft Press
Saitta, Larcom, and Michael Eddington, A conceptual model for threat modeling
applications, July 13 2005
http://dymaxion.org/trike/
http://dymaxion.org/trike/Trike_v1_Methodology_Document-draft.pdf
CVSS
http://www.dhs.gov/interweb/assetlibrary/NIAC_CyberVulnerabilitiesPaper_Feb05.pdf
OCTAVE
http://www.cert.org/octave/
AS/NZS 4360:2004 Risk Management, available from Standards Australia and Standards
New Zealand:
http://shop.standards.co.nz/productdetail.jsp?sku=4360%3A2004%28AS%2FNZS%29 

****************************************************************************************************
56

Manejando pagos en el Comercio Electrónico
Objetivos
Asegurar:
• Manejar los pagos de una manera segura y equitativa de los usuarios de sistemas de
comercio electrónico.
• Minimizar el fraude de los usuarios de tarjetas que no presencian transacciones. (CNP)
• Maximizar la privacidad y confianza para los usuarios de sistemas de comercio
electrónico.
• Cumplir con todas las leyes locales y normas PCI (acuerdos de Mercado)
Conformidades y leyes
Si usted es un comerciante del comercio electrónico, debe cumplir con todas sus leyes
locales, tales como impuestos de acción, prácticas de negocio. La venta de bienes o acciones
(similares), leyes limón (donde sean aplicables) y unas cuantas más. Debería consultar una
fuente de consejo legal competente para su jurisdicción para encontrar que es lo que se necesita.
Si usted es un comerciante de tarjetas de crédito, tiene que aceptar todos los acuerdos del
mercado de las tarjetas de crédito. Típicamente, estos son extremadamente estrictos en cuanto a
la cantidad de fraude permitido, y las directivas para las transacciones “no presenciales”. Debe
leer y seguir su contrato.
Si no comprende su contrato, debe consultar con el soporte de
su banco de negocio para más información.
Conformidad con PCI
Para cumplir con las regulaciones más actuales en relación a las tarjetas de crédito, debe
revisar las directivas PCI y su contrato de negocio. En resumen, aquí están los doce
requerimientos los cuales le solicitarán su uso si va a manejar pagos con tarjetas de crédito:

Construir y mantener una red segura Instalar y mantener una configuración de
firewall para proteger los datos.
No usar sistemas de contraseña por defecto 

****************************************************************************************************
57

ni otros parámetros de seguridad
proporcionados por el vendedor.
Proteger los datos de los usuarios de
tarjetas
Proteger datos almacenados
Cifrar la transmisión de los datos de
usuarios de tarjetas e información sensible a
través de las redes públicas
Mantener un programa de administración
de vulnerabilidades
Usar regularmente software actualizado de
anti-virus
Desarrollar y mantener sistemas y
aplicaciones seguras
Implementar fuertes medidas de control de
acceso
Restringir el acceso a los datos del negocio
a la necesidad-del-saber
Asignar un ID único a cada persona con
acceso a ordenador
Restringir el acceso físico a los datos de
usuarios de tarjetas
Monitorizar y testear regularmente las
redes
Registrar y monitorizar todos los accesos a
los recursos de la red y a los datos de usuarios
de tarjetas.
Testear regularmente los sistemas de
seguridad y procesos
Mantener una política de información de la
seguridad
Mantener una política que dirija la
seguridad de la información
OWASP es mencionado en los requisitos de “Desarrollar y mantener sistemas y aplicaciones
seguras”.
Desarrollar software y aplicaciones Web basadas en directivas de
codificación segura tales como las directivas del proyecto abierto
de seguridad de aplicaciones Web (Open Web Application 

****************************************************************************************************
58

Security Project). Revisa el código de aplicaciones a medida para
identificar vulnerabilidades en su codificación. Ver
www.owasp.org - “Las diez vulnerabilidades de seguridad más
críticas de aplicaciones Web.” Cubre la prevención de
vulnerabilidades comunes en la codificación en los procesos de
desarrollo de software, incluye: …
Esta guía es actualmente la mayor fuente de información para asegurar sus aplicaciones.
Aunque útil, el TOP 10 de está diseñado para ser el comienzo en mejorar la seguridad de sus
aplicaciones, y no como una referencia completa. El TOP 10 está (al tiempo que se escribe) en
proceso de ser actualizado.
Manejando tarjetas de crédito
Cada semana, leemos acerca de empresas que han sufrido su última humillación – los datos
de tarjetas de crédito de sus clientes han sido robados…otra vez. Lo que no se suele indicar es
que a menudo ese es el fin del negocio (ver CardSystems revocados por Visa y AMEX en la
sección Lectura adicional). Los clientes detestan ser forzados a reemplazar sus tarjetas de credito
y enviar faxes diariamente o semanalmente con retrocesos de operaciones al banco emisor.
Además de los inconvenientes causados a los clientes, los comerciantes rompen el acuerdo con
los bancos emisores si no poseen suficiente seguridad.
Esta sección detalla la manera de cómo deberían manejarse y almacenarse las transacciones
de pago. Por suerte, es incluso más fácil que hacerlo erróneamente.
Buenas prácticas 

****************************************************************************************************
59


• Procese las transacciones online inmediatamente o pase el procesamiento a una
tercera parte competente.
• Nunca almacene ningún número de tarjeta de crédito (CC). Si deben almacenarse,
debe seguir las directivas de PCI al pie de la letra. Le recomendamos
encarecidamente que no almacene datos de tarjetas de crédito.
• Si usted usa un servidor compartido para su sitio, no puede cumplir con las
directivas PCI. Debe tener su propia infraestructura para cumplir con las directivas
PCI.
A muchas empresas les tienta salirse del camino fácil y almacenar los números de las tarjetas
de crédito de los clientes, pensando que los necesitarán. Esto es incorrecto. No almacene
números de tarjetas de crédito.
Números de autorización
Después del procesamiento correcto de una transacción a usted se le asigna un número de
autorización. Este es único por transacción y no tiene un valor propio intrínseco. Es seguro
almacenar este valor, escribirlo en logs, presentarlo al equipo o enviarlo a través de e-mail al
cliente.
Manejando devoluciones de pagos
La única razón de negocio para almacenar números de tarjetas de crédito son las
devoluciones de pagos. Sin embargo, tiene diversas responsabilidades si facilita devoluciones de
pagos: 


****************************************************************************************************
60

• Debe seguir los términos del acuerdo de su comercio. La mayoría de los acuerdos de
comercio requieren que usted tenga las autorizaciones firmadas de derecho originales de
sus usuarios de tarjetas de crédito. Este trozo de papel firmado le ayudará en caso de
algún problema de cobros con el cliente.
• Es una buena práctica cifrar los números de tarjetas de crédito. Este es un requisito
obligado en las directivas PCI
• Limita los términos de la devolución de pagos a no más de un año, particularmente si
dispones de transacciones (CNP) “usuario de tarjeta no presente”
• Elimina los detalles de la tarjeta de crédito tan pronto como el acuerdo haya finalizado
El problema con el cifrado es que usted debe ser capaz de descifrar los datos posteriormente
en los procesos de negocio. Cuando se elige un método para almacenar las tarjetas de forma
cifrada, recuerde que no hay ninguna razón por la cual el servidor Web front-end necesite ser
capaz de descifrarlas.
Mostrando partes de la tarjeta de crédito
PCI solo permite la presentación de los primeros seis dígitos (BIN) o los últimos cuatro.
Nosotros recomendamos encarecidamente a no mostrar la tarjeta de crédito de ninguna manera si
esto puede ayudar.
Hay muchas maneras por las que rastrear, enviar o presentar un número de tarjeta de crédito
es práctico, pero no es posible mostrar números de tarjetas de crédito de una forma segura: 

****************************************************************************************************
61

• Si una gran organización tiene varias aplicaciones, todas con diferentes algoritmos para
mostrar una porción identificativa de la tarjeta de crédito, la tarjeta será revelada.
• Enviar una factura por correo electrónico es un método de bajo coste de informar a los
usuarios de cargas en sus tarjetas de crédito. Sin embargo, el e-mail no es seguro
• En muchos lugares de trabajo, los equipos de centros de llamada consisten típicamente de
gente temporal con gran ratio de rotación
• Los logs son atacados no simplemente para eliminar evidencias, sino también para
obtener secretos adicionales.
• En países con pequeña cantidad de instituciones de banca, los números institucionales
BIN están limitados. Por lo tanto, es posible adivinar números BIN válidos y reconstruir
el número de la tarjeta incluso si gran parte del número de la tarjeta se ha ocultado.
La mayoría de las tarjetas de crédito consisten en 16 dígitos (aunque algunas son de 14 o 15
dígito, tales como las de AMEX):
XXXX XXYY YYYY YYYC
C es la suma de comprobación. X es el número BIN, el cual hace referencia a la institución
que la emite. Y es el número de la tarjeta de cliente.
No debe almacenar el CCV, CCV2 y PVV (o PIN de valor de verificación). Estos son
campos de validación de tarjetas de crédito usados por muchas pasarelas de pago para proteger
contra el fraude de huella como el valor en el reverso de la tarjeta. Almacenar este valor no está
permitido por las secciones 3.2.3 y 3.4.
Por estas razones, se recomienda encarecidamente que no presente el usuario o su equipo con
números abiertos u oscurecidos de tarjeta de crédito. Aún así recomendamos que no muestre
ningún dígito de la tarjeta de crédito – sólo la fecha de caducidad.
Manipulando tarjetas
Esta sección no es aplicable a la mayoría de los desarrolladores de aplicaciones Web.
No le está permitido duplicar una tarjeta de crédito de un cliente. Esta es la práctica
común de birlar tarjetas en los terminales de transferencia electrónica para hacerlo después en los
sistemas de puntos de venta. Esto es parcialmente así para prevenir a los clientes de que la gente
les tome sus tarjetas múltiples veces, lo cual es desafortunadamente, demasiado a menudo el 

****************************************************************************************************
62

primer paso antes de duplicar fraudulentamente la tarjeta del cliente o cualquier otro uso
fraudulento de la misma.
No le está permitido almacenar el contenido de la banda magnética o el chip del valor
almacenado.
Corrección y mantenimiento
PCI le requiere que corrija sus sistemas dentro de un mes de la disponibilidad del parche para
cualquier parte del sistema que le ayude a procesar o almacenar las transacciones de tarjetas de
crédito. Debe tener protección anti-virus, y debe estar actualizada.
Revocaciones
Hay dos fraudes potenciales en las revocaciones: un usuario malintencionado poniendo
dinero de la cuenta de la organización a una tercera parte, y un intruso que ha descubierto con
éxito como usar un proceso automático de revocación para “rembolsar” dinero que no le
pertenece, por ejemplo usando números negativos.
Las revocaciones deberían siempre realizarse a mano, y deberían ser firmadas por dos
empleados distintos o grupos. Esto reduce el riesgo de fraude interno y externo.
Es esencial asegurarse de que todos los valores están dentro de los límites, y la autoridad de
firma está asignada apropiadamente.
Por ejemplo, en Melbourne, Australia en 2001, un miembro de un equipo confiable uso un
terminal móvil EFTPOS para desviar $400,000 de una organización deportiva. Si la persona
hubiera sido menos codiciosa, nunca se le hubiera cazado.
Es vital comprender la cantidad de fraudes que las organizaciones están dispuestas a tolerar.
Devolución de cobros
Muchos negocios operan perspizcamente dentro de estos márgenes conocidos como “puntos”
en términos de ventas. Por ejemplo, “6 puntos” significan 6% de ganancias sobre bastos costos,
lo cual es apenas lo que vale levantarse de la cama por la mañana.
Por lo tanto, si se encuentra usted mismo al final de muchas devoluciones después de
comprar productos, ha perdido más que solo el beneficio de una transacción. En términos de
venta, esto se denomina “shrinkage” (reducción) pero la policía le denomina fraude. Hay razones
legítimas par alas devoluciones, y las leyes de su consume local le dirá cuales son. Sin embargo, 

****************************************************************************************************
63

la mayoría de los distribuidores verán con malos ojos a los comercios con altos ratios de
devoluciones ya que les cuesta mucho tiempo y dinero e indica una falta de controles de fraude.
Puede tomar unos simples pasos para reducir su riesgo. Estos son:
• El dinero no es negativo. Use fuertes tipos para forzar a cero o números positivos, y
prevenga los números negativos.
• No sobrecarge una función de cobro para que se pueda invertir permitiendo valores
negativos.
• Todas las devoluciones y revocaciones requieren registros, auditorias y autorizaciones
manuales.
• No debería haber códigos en su sitio Web para revocaciones o devoluciones
• No envíe el material hasta que no tenga un código de autorización de la pasarela de pago
• Gran parte de las tarjetas de crédito tienen una fuerte relación entre los números BIN y el
país de la institución que la emitió. Considere firmemente el no enviar materiales a
tarjetas con BIN fuera-del-país
• Para bienes de gran valor, considere realizar el pago a través del teléfono a fax.
Algunos clientes intentaran devoluciones a menudo. Mantenga vigilados a clientes que
realicen devoluciones, y decida si estos presentan un riesgo excesivo
Solicite siempre el e-mail y número de teléfono del cliente que tenga la institución emisora
del cliente. Esto ayuda si otros avisos peligrosos se presentan
Una firma de 10 céntimos vale miles de dólares en infraestructura de seguridad. Haga saber
en su sitio Web que perseguirá el fraude en toda la extensión de la ley y que todas las
transacciones quedan completamente registradas. 

****************************************************************************************************

64

Lectura adicional
• Visa and AMEX revoke CardSystems for PCI breaches:
http://www.theregister.co.uk/2005/07/19/cardsystems/
• AMEX, Visa, Mastercard, Discover, JCB, Diner’s Club – Payment Card Industry
Payment Card Industry (PCI) Data Security Standard
http://www.visa-asia.com/ap/center/merchants/riskmgmt/includes/uploads/AP_PCI_Data_Security_Standard_1.pdf
https://sdp.mastercardintl.com/pdf/pcd_manual.pdf
• Visa
Cardholder Information Security Program
http://usa.visa.com/business/accepting_visa/ops_risk_management/cisp.html
Account Information Security Program
http://www.visa-asia.com/ap/sea/merchants/riskmgmt/ais.shtml
Mapping CISP to PCI
http://usa.visa.com/download/business/accepting_visa/ops_risk_management/cisp_Mappi
ng_CISPv2.3_to_PCIv1.0.pdf 

****************************************************************************************************

65

Phishing
Los ataques de phishing son uno de los mayores problemas para los sitios bancarios y de
comercio electrónico, con el potencial de destruir los medios de subsistencia y calificaciones
crediticias de un cliente. Existen algunas precauciones que los escritores de aplicaciones pueden
seguir para reducir el riesgo, pero la mayoría de los controles de phishing son procesales y
educación del usuario.
El phishing es un enfoque completamente diferente de la mayoría de las estafas. En estas,
existe una tergiversación y la victima es claramente identificable. En phishing, las líneas son
borrosas:
La victima de un robo de información es una victima: Y serán repetidamente victimas por
años. Simplemente vaciar su cuenta bancaria no es el final. Tal como la mayoría de los robos de
identidad, el daño nunca es completamente resuelto. Justo cuando la persona piensa que todo ha
sido finalmente limpiado, la información es utilizada nuevamente.
Bancos, ISPs, negocios y otros objetivos de phishing son victimas – ellos sufren una gran
perdida de reputación y confianza por parte de los consumidores. ¿Si hoy recibe un correo
electrónico legitimo de Citibank, confiaría en el?
El phishing comienza como una estafa estereotipada. Los clientes de un negocio en particular
son directamente atacados. A diferencia de una estafa estereotipada, la compañía nunca es
directamente atacada y el dinero para protección no es demandado por los atacantes. En los
pocos casos de chantaje, los clientes pueden seguir siendo víctimas más tarde.
¿Que es el phishing?
El phishing es una tergiversación donde el criminal utiliza ingeniería social para aparecer
como una identidad legitima. Ellos ganan la confianza para obtener información valiosa;
usualmente detalles de cuentas, o suficiente información para abrir cuentas, obtener prestamos, o
comprar bienes a través de sitios de comercio electrónico. 


****************************************************************************************************
66

Hasta un 5% de los usuarios parecen ser atraídos en este tipo de ataques, por lo tanto puede
ser bastante rentable para los estafadores – muchos de los cuales envían millones de correos
electrónicos con estafas por día.
El ataque básico de phishing sigue uno o más de estos patrones:
Envíos a través de un sitio web, correo electrónico, o mensaje instantáneo, que solicita al
usuario hacer clic en un enlace para “revalidar” o “reactivar” su cuenta. El enlace muestra una
imagen y semejanza creíble de vuestro sitio para convencer usuarios en enviar detalles privados.
Envíos de correo electrónico amenazantes a los usuarios indicando que el usuario ha atacado
al remitente. En el correo electrónico hay un enlace que pide a los usuarios proporcionar datos
personales.
Instalación de spyware que monitorea las URL’s de ciertos bancos a ser escritas, y cuando
ello ocurre, muestra una ventana emergente con un formulario creíble de dicha identidad
pidiendo a los usuarios sus detalles privados.
Instalación de spyware (como Berbew) que monitorea los datos contenidos en POST de
formularios, tales como usuarios y contraseñas, los cuales luego son enviados a un sistema de
terceras partes.
Instalación de spyware (como AgoBot) que analiza al ordenador anfitrión en busca de
información contenida en caches y cookies.
Envíos de mensajes “urgentes” indicando que la cuenta del usuario ha sido comprometida, y
que es necesario tomar ciertas acciones para recuperarla.
Envíos de mensajes del “departamento de seguridad” pidiendo a la victima controlar su
cuenta ya que alguien ilegalmente ha accedido a la misma.
Los gusanos se conocen por enviar correos electrónicos con estafas, tales como MiMail, por
lo tanto los mecanismos de envío evolucionan constantemente. Pandillas de phishing (crimen
organizado) utilizan frecuentemente software malicioso como Passer o SubSeven para instalar y
controlar ordenadores zombies con el objetivo de esconder sus acciones, proporcionar muchos
ordenadores anfitriones para recibir información de phishing, y evadir el cierre de uno o dos
anfitriones. 

****************************************************************************************************
67

Los sitios que no son comprometidos hoy en día no son inmunes al phishing el día de
mañana. Los phishers tienen una variedad de usos para cuentas robadas – cualquier tipo de
comercio electrónico es utilizable. Por ejemplo:
Cuentas bancarias: Robar dinero. Pero también existen otros usos: lavado de dinero. Si no
pueden convertir el dinero en efectivo, entonces comienzan a moverlo. Solo porque no usted no
tenga cualquier cosa de valor en su cuenta no significa que la cuenta no tenga valor. Muchas
cuentas bancarias se encuentran enlazadas. Entonces comprometiendo una puede probablemente
comprometer muchas otras. Las cuentas bancarias pueden dirigir hacia números de seguridad
social y otros números de cuentas. (¿Usted paga sus cuentas utilizando un sistema automático de
pago? Estos números de cuenta son accesibles. Lo mismo ocurre con los depósitos directos.)
Paypal: todos los beneficios de un banco sin ser un banco. No es posible un rastreo en papel
de las operaciones financieras.
eBay: lavado de dinero.
Western Union: conversión de dinero robado en efectivo.
Música en línea y otras tiendas de comercio electrónico: lavado de dinero. A veces los bienes
(ej. música) son mas deseables que dinero. Convertir el dinero robado en efectivo toma una
cantidad de recursos significativos. Solo obteniendo música (descargable, instantánea, no
retornable) es fácil.
Cuentas de PSI (proveedores de servicio de Internet): enviando correos masivos,
comprometiendo los servidores web, distribuyendo virus, etc. También puede dirigir hacia
cuentas bancarias. Por ejemplo, si utiliza un sistema de pago automático para abonar su cuenta
de PSI, entonces la cuenta de PSI usualmente lo dirigirá hacia su cuenta bancaria.
Empresas de servicios públicos (teléfono, gas, electricidad, agua) dirigen directamente a robo
de identidad.
Y la lista continúa…
Educación del usuario
Los usuarios son el primer vector de ataque para el phishing. Sin entrenar a sus usuarios en
desconfiar de los intentos de phishing, ellos caerán victimas del phishing tarde o temprano. 


****************************************************************************************************
68

Es insuficiente decir que los usuarios no deberían preocuparse acerca de este problema, pero
desafortunadamente, existen algunos controles técnicos efectivos de seguridad que funcionan
contra los intentos de phishing ya que los atacantes están constantemente trabajando en nuevos e
interesantes métodos para defraudar a los usuarios. Ellos son la primera, y frecuentemente la
ultima, línea de defensa, por lo tanto cualquier solución viable debe incluirlos.
Cree una política detallando exactamente que hará y que no hará. Comunique regularmente
esta política en términos fáciles de comprender (tal como “mi madre entenderá esto”) a los
usuarios. Asegúrese que ellos puedan acceder a las políticas en su sitio web.
De vez en cuando, pídale a sus usuarios confirmar que han instalado software anti-virus, antispyware,
que lo mantienen al día, y que parches han sido aplicados recientemente a sus
ordenadores. Esto promueve una higiene básica del ordenador en la mente de los usuarios.
Considere hacer acuerdos con empresas de anti-virus para ofrecer acuerdos especiales a sus
usuarios para ofrecer protección de bajo coste a ellos (y usted!).
Sin embargo, sea consciente que la educación de los usuarios es difícil. Los usuarios han sido
adormecidos en “aprendido desamparo”, y activamente ignoran políticas de privacidad, políticas
de seguridad, acuerdos de licencias, y paginas de ayuda. No espere que ellos lean nada de lo que
usted le ha comunicado.
Haga fácil a sus usuarios reportar estafas
Monitoree abusos@sudominio.com y considere configurar un formulario de sugerencias. Los
usuarios son frecuentemente la primera línea de defensa, y pueden alertarlo mucho antes que
simplemente esperar a que llegue el primer caso de estafa. Todo minuto en una estafa de
phishing cuenta.
Comuníquese con los clientes a través de correo electrónico
La gestión de relaciones con clientes (CRM) es un negocio inmenso, por lo tanto es
altamente improbable que pueda prevenir a su negocio enviar materiales de marketing a los
clientes. Sin embargo, es vital comunicarse con sus usuarios en una manera segura: 

****************************************************************************************************
69

Educación – Indique a los usuarios cada vez que se comunica con ellos, lo siguiente:
Deben escribir la URL en sus navegadores para acceder su sitio.
Usted no proporciona enlaces para que ellos hagan clic.
Usted no preguntara nunca por sus secretos.
Y en el caso que los usuarios reciban tales mensajes, deberán comunicarse inmediatamente
con usted para reportarlo a las autoridades competentes.
Marca consistente – no envíe correos electrónicos que referencia a otra compañía o dominio.
Si su dominio es “ejemplo.com”, todos los enlaces, URLs, y direcciones de correo electrónico
deben estrictamente referenciar “ejemplo.com”. La utilización de diferentes marcas y múltiples
dominios – incluso cuando su compañía es propietaria de múltiples nombres de dominio – genera
confusión del usuario y permite a los atacantes personificar a su compañía.
Reduzca el Riesgo – directamente no envíe correos electrónicos. Comuníquese con sus
usuarios utilizando su sitio web en lugar de correo electrónico. Las ventajas son muchas: el
contenido puede ser HTML, es mas seguro (ya que el contenido no puede ser imitado
sencillamente por los atacantes), es mas económico que los envíos masivos de correo, no
involucra bombardear Internet, y sus clientes saben que usted nunca les enviara un correo
electrónico, por lo tanto cualquier mensaje recibido de “usted” es fraudulento.
Reduzca el Riesgo – no envíe correos electrónicos en HTML. Si debe enviar correo
electrónico que contenga HTML, no permita que se pueda hacer clic las URLs y siempre envíe
correos con contenido MIME que contengan una parte legible en texto. El contenido en HTML
nunca debe incluir javascript, formularios, o pedir por información del usuario.
Reduzca el Riesgo – sea cuidadoso cuando utilice URL cortas ofuscadas
(http://redir.ejemplo.com/f45jgk) a ser escritas por los usuarios, ya que los estafadores pueden
descifrar como funciona el proceso de ofuscado y dirigir a sus usuarios hacia un sitio malicioso.
En general, sea cauto cuando utilice re-direccionamientos – la mayoría de ellos son vulnerables a
XSS.
Incremente la confianza – Muchas grandes organizaciones subcontratan a terceras partes para
las comunicaciones con los clientes. Trabaje con estas organizaciones para hacer aparentar que
todas las comunicaciones por correo electrónico provengan de su organización. (ej.
crm.ejemplo.com donde ejemplo.com es su dominio, en lugar de smtp.correomasivo.com o peor 

****************************************************************************************************

70

aun, solo una dirección IP). Esto aplica para cualquier proveedor de imágenes que sean utilizadas
en el cuerpo principal de la comunicación.
Incremente la confianza – Establezca un esquema de políticas de remitentes (SPF) en vuestro
DNS para validar sus servidores SMTP. Los correos electrónicos de phishing no enviados por los
servidores listados en sus registros SPF serán rechazados por vuestros agentes de transporte de
correo (MTA). Si eso falla, los mensajes de estafa serán marcados por nuevos productos como
Outlook 2003 (con las ultimas actualizaciones aplicadas), Thunderbird, y Eudora. Con el tiempo,
este control se convertirá más y más efectivo a medida que ISPs, usuarios y organizaciones
actualicen a versiones de software que tengan SPF habilitado por defecto.
Incremente la confianza – Considere utilizar S/Mime para firmar digitalmente sus
comunicaciones.
Respuesta a Incidentes – No envíe a los usuarios notificaciones electrónicas que sus cuentas
han sido bloqueadas o que ha ocurrido un fraude – si ello ha sucedido, solamente bloquee sus
cuentas y provea de un número de teléfono o dirección de correo electrónico para que lo
contacten (o mejor aun, llame al usuario).
Nunca pedir a sus clientes por sus secretos
Los estafadores usualmente preguntaran a sus usuarios por números de tarjeta de crédito,
contraseñas, PIN para “re-activar” sus cuentas. Frecuentemente los estafadores presentaran al
usuario parte de un número de tarjeta de crédito u otro tipo de verificación (nombre de soltera de
la madre – el cual se puede obtener en registros públicos), lo cual hace al ataque de phishing más
creíble.
Asegúrese que vuestros procesos nunca pidan a los usuarios por sus secretos; incluso secretos
parciales como los últimos cuatro dígitos de la tarjeta de crédito, o que confíen en “secretos”
fácilmente obtenibles en registros públicos o historias crediticias.
Dígales a los usuarios que usted nunca preguntara por sus secretos, y que lo notifiquen
inmediatamente si reciben un correo electrónico o visitan una pagina web similar a la de usted
que les solicita revelar sus secretos. 

****************************************************************************************************
71

Arregle todos sus problemas de XSS
No exponer cualquier código que contenga problemas de XSS, particularmente código no
autenticado. Los phisers usualmente atacan código vulnerable, tales como re-direccionamientos,
campos de búsqueda, y otros formularios en su sitio web que empujen al usuario hacia sitios
maliciosos.
Para mayor información sobre prevención de XSS, por favor diríjase a la sección de
Inyección de Agente de Usuario en el capitulo sobre Inyección de Interpretes.
No utilice ventanas emergentes
Las ventanas emergentes son una técnica comúnmente utilizada por estafadores para
aparentar provenir de vuestro dominio. Si no los utiliza, les dificulta mucho más la tarea a los
estafadores en usurpar la sesión del usuario sin ser detectados.
Dígales a vuestros usuarios que no utilicen ventanas emergentes y que le reporten cualquier
ejemplo inmediatamente.
¡No sea enmarcado!
A medida que las ventanas emergentes empezaron a ser bloqueadas por la mayoría de los
navegadores web, los phishers han comenzado a utilizar iframes y frames para albergar
contenido malicioso donde alberga su actual aplicación. Pueden utilizar errores o funcionalidades
del modelo DOM para descubrir secretos en su aplicación.
Utilice la directiva TARGET para crear una nueva ventana, la cual usualmente lo liberara de
trampas en IFRAME y Javascript. Esto significa algo como lo siguiente:
<A HREF=http://www.ejemplo.com/login TARGET=”_top”>
para abrir una nueva pagina en la misma ventana, pero sin utilizar ventanas emergentes.
Su aplicación debería regularmente verificar el modelo DOM para inspeccionar el entorno
del cliente y lo que esperaría visualizar, y rechazar los intentos de acceso que contengan marcos
adicionales. 

****************************************************************************************************
72

Esto no ayuda con los Objetos de Ayuda del Explorador (BHO’s) o barras de herramientas de
spyware, pero puede ayudar a evitar muchas estafas.
Mueva su aplicación a un enlace de distancia de su página principal
Es posible disminuir ataques de phishing ingenuos:
Ubique al autenticador de su aplicación en una página separada.
Considere implementar un control de referencias. Por ejemplo, en la sección “Error! Origen
de referencia no encontrado”, se muestra que los campos de referencia son fácilmente burlados
por atacantes motivados, por lo tanto este control no funciona tan bien ni siquiera con atacantes
moderadamente cualificados, pero elimina a los enlaces en correos electrónicos como un vector
de ataque.
Aliente a sus usuarios a escribir las URL’s o simplemente no les provea de un enlace para
hacer clic.
El chequeo de referencias es efectivo contra ataques indirectos tales como phishers – un sitio
hostil no puede forzar al navegador del usuario a enviar encabezados de referencias falsificados.
Imponga el uso de referencias locales para imágenes y otros recursos
Los estafadores intentaran utilizar imágenes de su sitio web, o de sitios web socios (tales
como programas de fidelización)
Haga utilizar a los estafadores sus propias copias locales de imágenes y recursos, ya que esto
incrementara las posibilidades que les salga mal, o que las imágenes hayan cambiado al
momento de realizar el ataque.
La funcionalidad es típicamente denominada “anti-sanguijuela”, y es implementada en la
mayoría de los servidores web pero deshabilitada por defecto. Akamai, que denomina esta
funcionalidad “Bloqueo basado en la Petición”, y similares empresas, pueden proveer este
servicio a sus clientes. 

****************************************************************************************************
73

Considere utilizar “imágenes de filigrana”, de manera que pueda determinar cuando ha sido
utilizada dicha imagen y poder rastrearla. Puede no ser posible realizar esto en sitios web con
mucho tráfico, pero puede ser útil esta técnica en una imagen por día.
Investigue todos los accesos que enumeren su sitio entero o solo accesos de imágenes – usted
puede realizar esto en su sitio web para comprobar como se visualizaría y pueda capturar
entradas de acceso que puedan ser utilizadas para identificar dicha actividad. Frecuentemente los
estafadores utilizan sus propios ordenadores para realizar estas actividades, por lo tanto es
posible que pueda suministrar a las autoridades competentes con direcciones IP para investigar.
Mantenga la barra de direcciones, utilice SSL, no utilice direcciones IP
Muchos sitios web intentan ocultar a los usuarios la barra de direcciones en un intento débil
de prevenir a los usuarios manipular la información, marcar a su sitio web como favorito o hacer
clic en el botón “Atrás” de su navegador. Todas estas son excusas que no ayudan a los usuarios a
prevenir ataques de phishing.
Información que es sensitiva para los usuarios debería ser movida a una sesión de objetos o –
en el peor de los casos – esconderla utilizando campos ocultos. Marcar como favorito no
funciona si la autorización obliga hacer cumplir los requisitos de acceso. Hacer clic en el botón
“Atrás” de su navegador puede ser derrotado a través de hacks de Javascript y secuencias de
cookies.
Los usuarios deberían poder visualizar su nombre de dominio – no direcciones IP. Esto
significa que usted deberá registrar todos sus hosts en lugar de publicar sus direcciones IP.
No sea la fuente de robos de identidad
Si usted posee una gran cantidad de información acerca de sus usuarios, tal como un banco u
organización gubernamental, no permita a las aplicaciones mostrar esta información a los
usuarios. 

****************************************************************************************************
74

Por ejemplo, las soluciones de banca electrónica pueden permitir a los usuarios actualizar sus
registros de dirección postal. No es necesario mostrar la dirección actual dentro de la aplicación,
ya que de esa manera la base de datos de la banca electrónica no necesitara contener información
sobre direcciones – solo los sistemas secundarios.
En general, minimice la cantidad de información mantenida en la aplicación. Si no se
encuentra disponible en primera instancia para ser robada, la aplicación será más segura para los
usuarios.
Implemente protecciones dentro de su aplicación
Considere implementar lo siguiente:
Si usted es un ISP o registrador de DNS; asegúrese que el registrante espere 24 horas antes
de proveerle acceso a su dominio; frecuentemente los estafadores registran y botan un dominio
en las primeras 24 horas a medida que la estafa es descubierta.
Si una cuenta es creada, pero no es utilizada por un periodo de tiempo (por ejemplo una
semana o mes), deshabilite dicha cuenta.
¿Es toda la información de registro valida? Por ejemplo, ¿es el código postal de California,
pero el número de teléfono es de Nueva York? De no ser así, no habilite la cuenta.
Limites diarios, particularmente para clientes no validados.
Periodos de asentamiento en transacciones fuera de línea para permitir a los usuarios repudiar
dichas transacciones.
Solo realice envíos de bienes a los domicilios actuales de los clientes y utilizar las
direcciones de facturación (por ejemplo, no envíe una cámara fotográfica a Fiji si el cliente vive
en Noumea).
Solo envíe bienes a clientes verificados (o considere implementar un límite para tales
transacciones).
Si su aplicación permite actualizaciones por correo electrónico o direcciones postales, envíe
una notificación a las dos direcciones (vieja y nueva) cuando se realiza una actualización. Esto
permite al usuario detectar cambios fraudulentos. 

****************************************************************************************************
75

No envíe contraseñas por correo electrónico o postal. Utilice contraseñas de un solo uso.
Envíe notificaciones a los usuarios que su contraseña ha sido cambiada utilizando este
mecanismo.
Implemente SMS o notificaciones por correo electrónico al realizar operaciones en la cuenta,
particularmente las que involucran transferencias o cambio de dirección postal o detalles
telefónicos.
Prevenga la posibilidad de realizar muchas transacciones por el mismo usuario en un periodo
corto de tiempo – esto desacelera un ataque automático.
Utilice autenticación de dos factores para cuentas extremadamente sensible o con mucho
volumen de transacciones.
Monitoree actividad inusual en las cuentas
Utilice heurística y otros mecanismos para determinar la probabilidad que los usuarios actúen
en una secuencia de eventos, tales como:
Vaciar sus cuentas.
Realizar muchas transacciones pequeñas para evitar el límite diario de transacciones.
Si muchas cuentas están realizando envíos a una misma dirección.
Si las mismas transacciones son realizadas rápidamente de la misma dirección IP.
Evite el pharming – considere escalonar las demoras de las transacciones utilizando un
monitoreo de recursos o agregando una demora. Cada transacción incrementara la demora por un
número aleatorio incremental, de manera que para la tercera o ciertamente décima transacción, la
demora es significativa (3 minutos o más entre páginas).
Ponga rápidamente fuera de línea los servidores victimas de phishing
Trabaje con autoridades competentes, reguladoras de bancos, ISPs y demás para poner el
servidor de phishing fuera de línea lo antes posible. Esto no significa destruirlos!
Estos sistemas contienen una significante cantidad de información acerca del atacante, por lo
tanto nunca destruya el sistema – si el mundo fuera un lugar perfecto, podría ser analizado
utilizando técnicas forenses por un experto en el tema. Cualquier software malicioso que sea 

****************************************************************************************************
76

identificado debe ser inmediatamente enviado a la mayor cantidad de empresas posible de
antivirus y antispyware.
Las victimas de servidores de phishing usualmente no estarán enteradas que su host ha sido
comprometido y le agradecerán que les haya avisado, por lo tanto no intente una incursión
durante el alba con un equipo SWAT!
Si piensa que el servidor esta bajo el control directo de un estafador, usted debería dejar a las
autoridades competentes manejar el caso, ya que por cuestiones de seguridad nunca debería tratar
con el estafador.
Si representa un ISP, es importante que comprenda que simplemente formateando y clonando
nuevamente el servidor, a pesar de ser bueno para el negocio, prácticamente garantiza que sus
sistemas serán repetidamente violados por las mismas organizaciones criminales. De todas las
victimas de phishing, los ISPs necesitan ser los más prudentes en encontrar y resolver estos
casos, y trabajar conjuntamente con las autoridades competentes.
Tome control de los nombres de dominio fraudulentos
Muchos estafadores intentan utilizar homógrafos y nombres de dominio mal deletreados para
burlar su sitio web. Por ejemplo, si un usuario visualiza http://www.ejemplo.com pero la j en el
ejemplo es un homógrafo de otro conjunto de caracteres, o el usuario visualiza errores
ortográficos tales como http://www.ejamplo.com o http://www.ejimplo.com el típico usuario no
notara la diferencia.
Es importante utilizar el proceso de resolución de disputas del registro de dominios para
tomar control de este dominio lo antes posible. Una vez que se encuentra bajo su control, no
podrá ser re-utilizado por los atacantes en el futuro. Una vez que tenga control, bloquee el
dominio para que no pueda ser transferido de usted sin una autorización firmada.
Las limitaciones con este enfoque incluyen: 

****************************************************************************************************
77

Existe una gran variedad de variaciones de dominio, por lo tanto los costos pueden aumentar
considerablemente.
Puede ser un proceso lento, particularmente con algunas políticas de DRP – las disputas
pueden tomar varios meses y mucho dinero para llegar a una resolución.
Monitorear un TLD tales como .COM es casi imposible – particularmente en regimenes
competitivos.
Algunas disputas no pueden ser ganadas si usted no posee una marca registrada para su
nombre de dominio, y mejor aun…
El crimen organizado es organizado – algunos incluso poseen sus propios registradores de
dominio o trabajan tan cercanos a ellos que la diferencia se hace indistinguible.
Trabaje con las autoridades competentes
La única manera de eliminar el problema es poner a los perpetradores bajo rejas. Trabaje con
las autoridades competentes – ayúdelos a reportar el crimen, maneje la evidencia con cuidado, y
persígalos! No re-envíe cada correo electrónico o pídale a sus usuarios que hagan esto, ya que es
el mismo crimen. Coteje toda la información de sus usuarios, repórtelo solo una vez, y haga
evidente que usted toma al asunto seriamente.
Ayude a sus usuarios a demandar a los estafadores por daños civiles. Por ejemplo, asesore a
los clientes sobre sus derechos y cuales son los pleitos posibles contra los estafadores.
Desafortunadamente, muchos estafadores provienen de países con poca o nula legislación
criminal contra fraude y phishing. Adicionalmente, estos estafadores pertenecen a (o actúan en
nombre) del crimen organizado. Es peligroso contactar estos criminales directamente, por lo
tanto siempre escuche las advertencias de las autoridades competentes y trabaje a través de ellos.
Cuando ocurre un ataque
Sea amable con sus clientes – ellos son las victimas inconscientes. Si desea mantener un
cliente de por vida, este es el momento de ser amable con ellos. Ayúdelos en todo lo posible.
Disponga de una política de manejo de incidentes de phishing lista y testeada. Asegúrese que
todos conozcan su rol para restringir el daño causado por los ataques. 

****************************************************************************************************
78

Si usted es una agencia de reporte crediticio o trabaja con un organismo regulador, haga
posible a los usuarios legítimos mover sus identidades crediticias. Esto permitirá mantener el
historial del usuario, pero marcara cualquier nuevo acceso como fraudulento.
Lectura adicional
Anti-phishing working group
http://www.antiphishing.org/

****************************************************************************************************
79

Servicios Web
Esta sección de la guía detalla los problemas comunes los desarrolladores de servicios Web
encaran y los métodos para resolver esos problemas. Dadas las limitaciones de espacio, no
podemos ver todos los problemas menores en gran detalle, dado que cada uno de ellos requiere
un libro por separado. En ves de eso, hicimos un intento por dirigir al lector al uso apropiado de
patrones y advertirle sobre posibles obstáculos en el camino.
Los servicios Web han recibido mucha publicidad y con ello como mucha confusión sobre
que son realmente. Algunos han sostenido que los servicios Web son el mayor descubrimiento
tecnológico desde la web en sí. Otros son más escépticos y mencionan que solo son aplicaciones
web evolucionadas. En cualquier caso, los problemas de seguridad en aplicaciones web aplican a
los servicios Web tal como aplican a las aplicaciones Web.
En el nivel más simple, los servicios web pueden ser vistos como aplicaciones web
especializadas que difieren principalmente en la capa de presentación. Mientras que las
aplicaciones web son típicamente basadas en HTML, los servicios web son basados en XML.
Usuarios interactivos de transacciones negocio a consumidor (B2C por sus siglas en ingles) son
quienes normalmente acceden a las aplicaciones web, mientras que los servicios Web son
empleados como bloques de construcción por otras aplicaciones Web para formar cadenas
negocio a negocio (B2B por sus siglas en inglés) usando el llamado modelo SOA. Los servicios
Web típicamente representan una interfaz pública funcional, que se llama de forma programática,
mientras que las aplicaciones Web tienden a lidiar con un conjunto de características más rico y
son dirigidas al contenido en la mayoría de las veces.
Asegurando los servicios Web
Los servicios Web, como otras aplicaciones distribuidas, requieren protección en múltiples
niveles: 

****************************************************************************************************
80

• Los mensajes SOAP que son enviados en la red deben ser entregados confiablemente y
sin modificaciones
• El servidor necesita saber con confianza con quien esta hablando y a que tienen derecho
los clientes
• Los clientes necesitan saber que están hablando al servidor correcto y no a un sitio de
“phishing” (vea el capítulo de “Phishing” para más información)
• El registro de eventos debe contener suficiente información para reconstruir
confiablemente la cadena de eventos y rastrear de vuelta a los que llamaron funciones sin
autentificación previa
A su vez, las soluciones a alto nivel que se discuten en las siguientes secciones, son válidas
para la mayoría de las aplicaciones distribuidas, con algunas variantes en los detalles de
implementación
Las buenas noticias para los desarrolladores de servicios Web son que estas son tareas a nivel
infraestructura, así que, teóricamente, es solo el administrador del sistema el que debe
preocuparse por estos problemas. Sin embargo, por varias de razones discutimos después en este
capítulo, los desarrolladores de WB usualmente tienen que al menos saber de todos estos riesgos,
y muchas veces ellos aun tienen que codificar manualmente o ajustar los componentes de
protección.
Seguridad en la comunicación
Hay una frase común e incluso una solución más comúnmente implementada: “Estamos
usando SSL para proteger todas las comunicaciones, estamos seguros”. Al mismo tiempo ha
habido tantos artículos publicados sobre el tema de “seguridad en el canal contra seguridad de
testigos (tokens)” que hace difícil repetir ese argumento aquí. Por lo tanto, abajo tenemos una
pequeña lista de las fallas más comunes cuando se usa un canal seguro solamente:
• Solo provee seguridad “punto a punto”
Cualquier comunicación con múltiples “brincos” requiere que se establezcan canales
separados (y confiables) entre cada nodo de comunicación en todo el camino. Hay también un
problema sutil de transitividad de confianza, dado que la confianza entre los pares de nodos
{A,B} y {B,C} no implica automáticamente una relación de confianza entre {A,C}. 

****************************************************************************************************
81

• Problemas de almacenamiento
Después de que los mensajes son recibidos en el servidor (Incluso si no es el receptor
adecuado), ellos existen en forma de texto claro, al menos temporalmente. El almacenamiento de
la información transmitida en el intervalo, agrava el problema como en los registros de eventos
del servidor destino (donde puede ser vista por cualquiera) o en la memoria rápida (cache) de los
servidores locales.
• Falta de interoperabilidad
Mientras que SSL provee un mecanismo estándar para la protección del transporte, las
aplicaciones tienen que usar mecanismos altamente propietarios para transmitir las credenciales,
asegurarse de la frescura, integridad y confidencialidad de los datos que se envían en el canal
seguro. Usar un servidor diferente, el cual es semánticamente equivalente, pero que acepta un
formato diferente de las mismas credenciales, requerirá que se altere el cliente y que se evite
formar cadenas automáticas con servicios B2B anteriores.
La protección de testigos basada en estándares provee en muchos casos una alternativa
superior para el modelo de comunicación en los servicios web orientados a SOAP.
Dicho esto, la realidad es, que la mayoría de los servicios Web actuales están protegido por
alguna forma de mecanismo de seguridad, el cual por si solo puede ser suficiente para una
aplicación interna simple. Sin embargo, uno debe darse cuenta claramente de las limitaciones de
tal solución y hacer un análisis concienzudo en el tiempo de diseño sobre el canal, el testigo o
una protección combinada que funcionaría mejor para el caso en específico.
Pasando las credenciales
Para poder estableces el intercambio de credenciales y la autentificación en servicios web,
sus desarrolladores deben resolver los siguientes problemas.
Primero, dado que los mensajes de SOAP son basados en XML, todas las credenciales que se
pasen deben ser convertidas a formato texto. Esto no es un problema para las credenciales del
tipo Usuario / contraseña, sino para los binarios (como certificados X.509 o testigos de Kerberos)
lo que requiere que se conviertan en texto antes de enviarlos a reestablecerlos sin ambigüedad
una ves recibidos. Lo cual se hace usualmente por medio de una llamada a un procedimiento
Base64 para codificar y decodificarlos. 

****************************************************************************************************
82

Segundo, pasar las credenciales conlleva un riesgo inherente a su descubrimiento, ya sea por
“olerlos” mientras están siendo transmitidos en la red o al analizar los registros de eventos del
servidor. Pro lo tanto, cosas como contraseñas y llaves privadas tienen que ser o cifradas o
enviadas en “texto claro”. Usualmente las alternativas para evitar enviar credenciales delicadas
es usar cifrado de una vía o firmas digitales criptográficas.
Asegurarse de la frescura del mensaje
Incluso los mensajes válidos pueden ser peligrosos si se usa un ataque de re envío, por
ejemplo, que es enviado múltiples veces al servidor para hacer que se repita la operación de
petición. Esto se logra por la captura del mensaje completo, incluso si esta protegido contra
modificación, dado que es el mensaje en sí el que es usado para al ataque (vea la sección de
inyección de XML del capítulo sobre inyección en interpretes).
Las medidas usuales para protegerse contra mensajes re enviados son usar identificadores
únicos en los mensajes y llevar registro de los procesados o usar un tiempo de validez
relativamente corto. En el mundo de los servicios Web, la información sobre el tiempo de
creación de es comunicado usualmente usando estampillas de tiempo (timestamps), las cuales
pueden simplemente indicar el instante en que fue creado el mensaje, o tener información
adicional, como su tiempo de expiración o ciertas condiciones.
La última solución, aunque es más fácil de implementar, requiere la sincronización del reloj y
es sensible a “sesgos de tiempo” en el servidor, si el servidor y el cliente se mueven mucho
evitarán que se entregue el mensaje a tiempo, aunque esto usualmente no representa un problema
importante con las computadoras modernas. Un problema mayor es el encolamiento de mensaje
en el servidor, dado que los mensajes pueden expirar mientras esperan en la cola a ser
procesados por un servidor especialmente ocupado o falto de respuesta.
Proteger la integridad del mensaje
Cuando un mensaje es recibido por un servicio Web, debe siempre preguntarse 2 cosas:
“confiar en el emisor“, “confiar en el mensaje creado”. Asumiendo que la confianza del emisor
ha sido establecida de una manera u otra. El servidor debe asegurarse que el mensaje que esta
viendo fue, de hecho, enviado por el emisor y que no fue alterado en el camino
(intencionalmente o no). Esto puede afectar la calidad técnica de un mensaje SOAP, como el 
****************************************************************************************************
83

estampado de tiempo del mensaje o el contenido de negocio, como el monto a ser retirado de una
cuenta bancaria. Obviamente, ningún cambio debe pasar desapercibido por el servidor.
En los protocolos de comunicación usualmente hay algunos mecanismos como una suma de
comprobación para asegurar la integridad de los paquetes. Esto no sería suficiente, sin embargo,
en el reino de los servicios Web públicamente expuestos, dado que las sumas de comprobación
(o “digest” o su equivalente criptográfico) son fácilmente reemplazables y no puede ser rastreado
confiablemente al emisor. La asociación requerida establecida al utilizar HMAC o por combinar
“digests” de mensajes con una firma criptográfica o con cifrado de llave privada (asumiendo que
las llaves son solo conocidas por las 2 partes en comunicación) para asegurarse que cualquier
cambio resultará inmediatamente en un error criptográfico.
Protegiendo la confidencialidad del mensaje
Frecuentemente, no es suficiente con asegurar la integridad, en muchos casos también es
deseable que nadie pueda ver los datos que son pasados y/o almacenados localmente. Puede
aplicar el mensaje completo que se va a procesar o solo a ciertas partes de él. En cualquier caso,
algún tipo de cifrado es requerido para encubrir el contenido. Normalmente, se usan los
algoritmos de cifrado simétrico en fragmentos de datos, dado que es significativamente más
rápido que los asimétricos. El cifrado asimétrico es aplicado entonces para proteger las llaves de
sesión, las cuales, en muchas implementaciones, son válidas solo para una comunicación y
después son desechadas.
Aplicar el cifrado requiere de conducir un trabajo exhaustivo de configuración, dado que
comunicar las partes ahora tienen que conocer que llaves pueden confiar, lidiar con validación de
certificados o llaves y conocer cuales llaves debe ser usadas para la comunicación.
En muchos casos, el cifrado se combina con firmas para proveer integridad y
confidencialidad. Normalmente, las llaves de firmado son diferentes de las de cifrado,
principalmente porque en sus ciclos de vida diferentes, las llaves de firmado son asociadas
permanentemente con sus propietarios, mientras que las llaves de cifrado pueden ser invalidadas
después del intercambio de mensajes. Otra razón puede ser la separación de responsabilidades de
negocio, la autoridad firmante (y la llave correspondiente) puede pertenecer a un departamento o
persona, mientras que las llaves de cifrado son generalmente controladas en el servidor por
miembros del departamento de TI. 

****************************************************************************************************
84

Control de acceso
Después de que el mensaje ha sido recibido y validado exitosamente, el servidor debe
decidir:
• Sabe quien esta pidiendo la operación (Identificación)
• Confía en la identidad que el emisor dice tener (Autentificación)
• Permitirá al emisor realizar esta operación (Autorización)
Hay mucha actividad sobre WS que toma lugar en esta etapa, son muchas maneras nuevas de
pasar las credenciales para la autentificación. La mayoría de las veces, las tareas de autorización
ocurren completamente fuera de la implementación del servicio web en el servidor de políticas
que protege el dominio entero.
Hay otro problema significativo aquí, los cortafuegos tradicionales de HTTP no ayuda a
detener ataques en los servicios Web. Una organización necesitaría un cortafuego de
XML/SOAP, el cuál es capaz de conducir un análisis a nivel aplicación del tráfico del servidor
web y hacer decisiones inteligentes sobre pasar los mensajes SOASP a su destino o no. El lector
tendrá que ver otros libros y publicaciones en este tema tan importante, dado que es imposible
cubrirlo en solo un capítulo.
Auditoria
Una tarea común, típicamente requerida par las auditorias, es reconstruir la cadena de
eventos que llevó a un problema en particular. Usualmente, esto se logra al guardar registro de
eventos en el servidor en una ubicación segura, disponible solo para los administradores de TI y
los auditores de sistema, para crear lo que comúnmente se conoce como un rastro de auditoria.
Los servicios web no son excepción a esta práctica y sigan la solución común a otros tipos de
aplicación Web.
Otro objetivo de las auditorias es el no repudio, que significa que un mensaje puede ser
rastreado hacia el emisor confiablemente. Siguiendo prácticas legales estándar, los documentos
electrónicos requieren alguna forma de “firma digital”, pero esta definición es extremadamente
amplia y puede significar prácticamente cualquier cosa, en muchos casos escribiendo su nombre
y fecha de nacimiento calificada como una e-firma (e-signature).
En lo que concierne al WS, tal nivel de protección no sería suficiente y sería fácilmente
olvidable. La práctica estándar requiere firmas digitales criptográficas sobre cualquier contenido 

****************************************************************************************************
85
que tiene que estar ligada legalmente, Si un documento con tal firma es guardado en registro de
eventos. Puede ser rastreado confiablemente hacia el propietario de la llave de firmado.
Jerarquía de seguridad en Servicios Web
Técnicamente hablando, los servicios web en sí son simples y versátiles, son comunicaciones
basadas en XML, descritos por una gramática basada en XML, llamada lenguaje descriptivo de
servicios web (WSDL por sus siglas en inglés, vea http://www.w3.org/TR/2005/WD-wsdl20-
20050510), el cual tiene interfaces abstractas de servicios, que consisten en mensajes expresados
como un esquemas XML y operaciones a el formato de red. Aunque no es un requerimiento, el
formato elegido actualmente es SOAP sobre http. Esto significa que las interfaces de los
servicios web están descritas en términos de los mensajes SOAP de entrada y salida, transmitidos
sobre el protocolo HTTP.
Comités de estándares
Antes de revisar los estándares individuales, vale la pena dar una mirada pequeña a las
organizaciones, las cuales están desarrollando y promocionándolos. Hay unos pocos grupos a
nivel industria y consorcios trabajando en esta área, las más importantes están listadas abajo.
W3C (vea http://www.w3.org) es la más importante y bien conocido grupo industrial, el cual
posee muchos estándares relacionados con la Web y los desarrolla en forma de grupo de trabajo.
De particular interés para este capítulo sería los estándares de esquema XML (XML Schema)
SOAP, XML-dsig, XML-enc y WSDL (llamadas recomendaciones en le jerga del W3C).
OASIS (vea http://www.oasis-open.org) mayormente lidia con los estándares específicos a
los servicios Web no necesariamente relacionados con seguridad. También opera en forma de
comités que forman los llamados comités técnicos (TC) para los estándares que están siendo
desarrollados. Para el interés de esta discusión, OASIS posee los estándares de WS-Security y
SAML.
El grupo de interoperabilidad de servicios web (WS-I por sus siglas en inglés vea
http://www.ws-i.org/) fue formado para promover un marco de trabajo genérico para servicios
web ínter operables. La mayoría de su trabajo consiste en tomar estándares ampliamente
conocidos y desarrollar los llamados perfiles o conjuntos de requerimientos para la conformidad
con implementaciones de servicios web. En particular, confía en perfiles de seguridad básicos 

****************************************************************************************************
86

(BSP por sus siglas en inglés) del estándar WS-Security y un conjunto de características de
seguridad opcionales y requeridas por un servicio web que dice ser ínter operable.
Liberty Alliance (LA, vea http://projectliberty.org), este consorcio fue formado para
desarrollar y promover un marco de trabajo ínter operable para la federación de identidades.
Aunque este marco no es estrictamente para servicios web, si no en general, es importante para
este tema por su relación cercana con es estándar desarrollado por OASIS.
Además de las organizaciones previamente listadas, hay otras asociaciones en la industria ya
sea permanentemente establecidas o de corta vida, la cuales impulsaron varias actividades de
seguridad para los servicios web. Ellos están conformados usualmente de compañía líderes en la
industria como Microsoft, IBM, Verisign, BEA, Sun y otras que se unen a ellas para trabajar en
una propuesta para un problema en particular. El resultado de estas actividades en conjunto, una
vez que ellas alcanzan cierta madurez, es enviado a comités de estandarización para formar la
base de un nuevo estándar de la industria
SOAP
O Simple Object Access Protocol en inglés (SOAP, vea http://www.w3.org/TR/2003/RECsoap12-part1-20030624/)
provee un marco de trabajo basado en XML par intercambiar
información estructurada y basada en tipos entre servicios. Esta información enviada en el
encabezado y cuerpo, puede teóricamente ser transmitida sobre un número de protocolos de
transporte pero solo el de http ha sido definido formalmente y está en uso activo en la actualidad.
SOASP provee interacción para las llamadas remotas a procedimientos (RPC por sus siglas en
inglés) similares a las llamadas remotas a funciones y la comunicación estilo documentos con
contenidos de mensaje basados exclusivamente en definiciones de esquemas XML en el lenguaje
WSDL de servicios web. Los resultados de invocarlos pueden ser opcionalmente regresados en
un mensaje respuesta o una falla puede ser creada, la cual es equivalente a usar excepciones en
los lenguajes de programación tradicionales.
El protocolo SOAP, al mismo tiempo que define un marco de comunicación no provee ayuda
en términos del intercambio seguro de mensajes, las comunicaciones deben de ocurrir ya sea
sobre canales seguros o usando mecanismos de protección descritos después en este capítulo.
Especificaciones de seguridad en XML (XML-dsig & Encryption)
XML Signature (XML-dsig, vea http://www.w3.org/TR/2002/REC-xmldsig-core20020212/),
y XML Encryption (XML-enc, vea http://www.w3.org/TR/2002/REC-xmlenc-core-

****************************************************************************************************
87

20021210/) agregan protección criptográfica a los documentos en XML plano. Estas
especificaciones agregan integridad, autentificación de mensaje y firmante así como soporte para
cifrado / descifrado del documento XML completo o solo algunos elementos dentro de él.
El valor real de estos estándares viene del marco altamente flexible desarrollado para
referenciar los datos a ser procesados (interna o externamente relacionados a un documento
XML), refiérase a las llaves secretas y pares de llave y a la representación de resultados de firmar
/ cifrar las operaciones como XML las cuales son agregadas / sustituidas en el documento
original.
Sin embargo, pos sí mismas, XML-dsig y XML-enc no resuelven el problema de la seguridad
de servicios web basada en SOAP, dado que el cliente y servicio primero tiene que acordar el
orden de estas operaciones, donde buscar la firma, donde obtener los testigos criptográficos, que
elementos del mensaje deben ser firmados y cifrados, cuanto tiempo se considera el mensaje
válido y así. Estos problemas son resueltos por las especificaciones de alto nivel, obtenidas en las
siguientes secciones.
Especificaciones de Seguridad
Además de los estándares de arriba, hay un amplio conjunto de especificaciones relativas a
seguridad que esta siendo actualmente desarrollado en carios aspectos de las operaciones de
servicios Web.

Uno de ellos es SAML, el cual define como deben intercambiarse las aserciones de identidad,
atributo y autorización entre los servicios participantes en una manera segura e ínter operable.
Un gran consorcio, dirigido por Microsoft e IBM, con la ayuda de Verisign, RSA Security y
otros participantes, desarrolló una familia de especificaciones, llamadas en su conjunto como
“Web Services Roadmap”. Su fundamento, WS-Security, ha sido enviado a OASIS y se
convirtió en un estándar OASIS en 2004. Otras especificaciones importantes de esta familia se
encuentran aun en diferentes etapas de desarrollo y los planes para su envío no han sido
anunciados. Aunque cubren aspectos importantes como políticas de seguridad (WS-Policy),
problemas de confianza e intercambio de testigos de seguridad (WS-Trust), establecer el
contexto para conversaciones seguras (WS-SecureConversation). Una de las especificaciones de
esta familia, WS-Federation, compite directamente con el trabajo hecho por el consorcio LA y
aunque se supone que se incorporó en la versión Longhorn de Windows, su futuro no es claro en 

****************************************************************************************************
88

este momento, dado que ha sido retrazado significativamente y actualmente no tiene empuje de
la industria que lo respalde.
Estándar WS-Security
La especificación de WS-Security (WSS) fue desarrollada originalmente por Microsoft, IBM
y Verisign como parte de un “plan de trabajo”, el cual fue renombrado como Arquitectura de
Servicios Web (o WSA por sus siglas en inglés). La WSS sirvió como la base para todas las
demás especificaciones en este dominio, creando una infraestructura básica para desarrollar el
intercambio seguro de mensajes. Dada su importancia para establecer servicios Web ínter
operables, fue enviada a OASIS y después del trabajo requerido por el proceso del comité, se
convirtió en un estándar aceptado oficialmente. La versión actual es la 1.0 y el trabajo en la
versión 1.1. de la especificación esta en progreso, se espera que termine en la segunda mitad del
2005.
Organización del estándar
El estándar WSS lidia con varias áreas medulares de seguridad, dejando muchos detalles a
los llamados documentos perfil. Las áreas principales, ampliamente definidas por el estándar
son:
• Maneras de agregar encabezados de seguridad (encabezados WSSE) a los sobres de
SOAP
• Adjuntar testigos de seguridad y credenciales al mensaje
• Insertando un estampado de tiempo
• Firmar el mensaje
• Cifrado del mensaje
• Extensibilidad
La flexibilidad del estándar de WS-Security reside en su extensibilidad, de manera que
permanece adaptable a nuevos tipos de testigos de seguridad y protocolos que han sido
desarrollados. Esta flexibilidad es adquirida al definir perfiles adicionales para insertar nuevos
tipos de testigos de seguridad en el marco de trabajo de WSS. Mientras que las partes de firmado
y cifrado del estándar no se espera que requieran cambios significativos (solo cuando XML-dsig
y XML-enc son actualizados), los tipos de testigos pasados a los mensajes WSS y la manera de 

****************************************************************************************************
89

adjuntarlos al mensaje pueden varias sustancialmente. A alto nivel el estándar WSS define tres
tipos de testigos de seguridad adjuntables al encabezado WSS: Usuario/Contraseña, Binario y
testigo XML.
Cada uno de estos tipos es definido mas a detalle en uno (o más) de los documentos de perfil,
los cuales definen atributos y elementos adicionales que se necesitan para representar un tipo en
particular de testigo de seguridad. 

Figura 1: Jerarquía de la especificación WSS
Propósito
El objetivo principal del estándar WSS es proveer herramientas para la protección de la
comunicación a nivel mensaje, mientras que cada mensaje representa una pieza aislada de
información, contiene suficiente información de seguridad para verificas todas las propiedades
importantes del mensaje, como: Autenticidad, integridad, frescura y aquellas para iniciar el
descifrado de cualquier parte cifrada del mensaje. Este concepto esta en contraste profundo con
la seguridad de canal tradicional., la cual, metódicamente aplica contexto pre-negociados de
seguridad a todo el flujo de datos, contrario al proceso selectivo de asegurar mensajes 

****************************************************************************************************
90

individuales de WSS. En el plan de trabajo, este tipo de servicios se espera que sea proveído
eventualmente por implementaciones de estándares como WS-SecureConversation.
Desde el principio, el estañar WSS fue concebido como un conjunto de herramientas a nivel
de mensaje para la entrega segura de datos a protocolos de nivel superior. Estos protocolos
basados en estándares como WS-Policy, WS-trust y Liberty Alliance confían en los testigos
trasmitidos para implementar políticas de control de acceso, intercambio de testigos y otros tipos
de protección e integración, Sin embargo, si se implementa solo, el estándar WSS no obliga
ninguna propiedad de seguridad en particular y una aplicación a la medida puede guiar a
vulnerabilidades de seguridad sutiles y difíciles de detectar tal como se discute en las siguientes
del capítulo.
Bloques de construcción de WS-Security
Es estándar de WSS actualmente consiste en un número de documentos, un documento
principal el cual contiene como los encabezados de seguridad deben ser incluidos en el sobre
SOAP y describe los bloques de alto niveles, los cuales deben estar presentes en un encabezado
de seguridad válido. Los documentos perfile tienen la tarea doble de extender la definición de los
tipos de testigos de su incumbencia, al proveer atributos y elementos, así como definir la relación
que no está en la especificación principal, tal como el uso de archivos adjuntos.
La especificación principal de WSS 1.0, localizada en http://docs.oasisopen.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0(En
inglés), define varios
tipos de testigos de seguridad (los que se discuten en esta sección) las maneras de referenciarlos,
estampados de tiempo, y las maneras de aplicar XML-dsig y XML-enc en los encabezados de
seguridad (vea la sección de XML-dsig para mas detalles sobre su estructura general).
Las especificaciones asociadas son: 

****************************************************************************************************
91• Perfil de nombre de usuario 1.0 (Username profile 1.0), localizado en http://docs.oasisopen.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0(En
inglés), el cual
agrega varias extensiones relacionadas a contraseñas para el testigo básico
UsernameToken de la especificación principal.
• Perfil de testigo con certificado X.509, localizado en http://docs.oasisopen.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0
(En inglés) el cual
especifica, como los certificados X.509 pueden ser pasados en el BinarySecurityToken
especificado en el documento principal.
• Perfil de testigo SAML, localizado en http://docs.oasis-open.org/wss/2004/01/oasis-wsssaml-token-profile-1.0.pdf
el cual especifica como los testigos basados en XML de
SAML pueden ser insertados en los encabezados WSS.
Como son pasados los datos
La especificación de seguridad WSS lidia con dos tipos distintos de datos: información de
seguridad, la cual incluye testigos de seguridad, firmas, aserciones, etc.; y datos de mensaje, por
ejemplo cualquier cosa que sea pasada en el mensaje SOAP, Siendo un estándar basado en SML,
WSS trabaja con información textual agrupada en elementos XML, Cualquier dato binario, como
las firmas criptográficas de los testigos de Kerberos, tiene que pasar por una transformación
especial, llamada codificación y decodificación Base64, la cual provee una conversión sencilla
de formato binario a ASCII y de regreso. El ejemplo abajo demuestra como luce la información
binaria en forma codificada:
cCBDQTAeFw0wNDA1MTIxNjIzMDRaFw0wNTA1MTIxNjIzMDRaMG8xCz
Después de codificar el elemento binario un atributo con el identificador del algoritmo es
agregado al elemento XML que contiene los datos, de manera que el receptor sabrá como aplicar
la decodificación correcta para leerla. Estos identificadores están definidos en los documentos de
la especificación WSS.
Estructura del encabezado de seguridad
El encabezado de seguridad en el mensaje es usado como un tipo de sobre para una carta
(sella y protege la carta, pero no le importa su contenido). Esta “indiferencia” trabaja en la otra 



****************************************************************************************************
92
dirección también, dado que la carta (el mensaje SOAP) no sabrá ni le importa su sobre
(encabezado WSS), dado que las diferentes unidades de la información llevadas en el sobre y en
la carta están (presumiblemente) destinadas a diferentes personas o aplicaciones.
El encabezado de SOAP puede contener múltiples encabezados de seguridad mientras que
ellos sean manejados por diferentes actores (para SOAP 1.1) o roles (SOAP 1.2). Su contenido
puede también ser referido por cada uno, pero tales referencias presentan un problema logístico
complicado para determinar el orden apropiado de verificación de descifrado / firmado y deben
ser evitadas generalmente. El encabezado de seguridad WSS en sí tiene una estructura relajada,
ya que la especificación en si misma no pide que ningún elemento este presente, así que un
encabezado minimalista con un mensaje vació luciría como:

Sin embargo, para que sea útil, debe contener algo de información, la cual va a ayuda a
asegurar el mensaje. Esto significa incluir uno o más testigos de seguridad con elementos de
referencias, firma XML y Cifrado, si el mensaje esta firmado o cifrado. Así que un encabezado
típico luciría mas como el siguiente:

****************************************************************************************************
93
 REVISAR CODIGO

****************************************************************************************************
94
REVISAR CODIGO

Tipos de testigos
Un encabezado WSS puede tener los siguientes tipos de testigos de seguridad en él: 
****************************************************************************************************
95

• Testigo de nombre de usuario
Define un mecanismo para pasar el nombre de usuario y opcionalmente una contraseña, esta
última es descrita en el documento de perfil de nombre de usuario. A menos que todo el testigo
sea cifrado, un mensaje que incluye una contraseña en texto claro debe ser siempre transmitido
en un canal seguro. En situaciones donde el servicio web objetivo tiene acceso a contraseñas en
texto claro para verificación (esto puede no ser posible para LDAP o algunos otros directorios de
usuarios, los cuales no regresan contraseñas en texto claro), es generalmente preferible usar una
versión cifrada con nonce y estampado de tiempo. El documento de perfil define un algoritmo
ambiguo para producir “hashes” de contraseñas:
Password_Digest = Base64 ( SHA-1 ( nonce + created + password ) )
• Testigo binario
Ellos son usados para convertir datos binarios, como certificados X.509, es un formato de
texto codificado, Base64 usualmente. La especificación principal define el elemento
BinarySecurityToken, mientras que los documentos de perfil especifican sub elementos y
atributos específicos para manejar varios testigos adjuntos. Actualmente, el perfil X.509 ha sido
adoptado y hay trabajo en proceso para el perfil de Kerberos. 

• Testigo XML
Está destinado para cualquier tipo de testigo basado en XML, pero principalmente para las
aserciones SAML. La especificación principal menciona la posibilidad de validar tales testigos,
dejando los detalles a los documentos de perfil. En este momento, el perfil de SAML 1.1 ha sido
aceptado por OASIS. 

****************************************************************************************************
96
Aunque técnicamente no es un testigo de seguridad, un elemento de estampado de tiempo
puede ser insertado en el encabezado de seguridad para asegurar la frescura del mensaje. Vea la
sección de más lecturas para un patrón de diseño sobre esto.
Referenciando partes del mensaje
Para obtener testigos de seguridad pasados en un mensaje o para identificar partes del
mensaje firmadas o cifradas, la especificación principal adopta el uso del atributo especial
wsu:Id. El único requerimiento en este atributo es que los calores como identificadores deben ser
únicos en el alcance del documento XML donde ellos son definidos. Su aplicación tiene una
ventaja principal para los procesadores intermedios, porque no requiere entendimiento del
esquema XML del mensaje. Desafortunadamente, las especificaciones de firma y cifrado de
XML no permiten la extensibilidad de los atributos (porque tienen un esquema cerrado) así que
cuando se está ubicando los elementos de firma y cifrado, el ID local de los elementos de firma y
cifrado debe ser considerado primero.
La especificación principal de WSS también define un mecanismo general para referenciar
los testigos de seguridad por medio del elemento SecurityTokenReference. Un ejemplo de tal
elemento, relacionado a una aserción SAML en el mismo encabezado se muestra abajo: 

Como este elemento esta diseñado para referirse a cualquier tipo de testigo posible
(incluyendo las llaves de cifrado, certificados, aserciones SAML, etc.) ya sean internos o
externos al encabezado WSS, es enormemente complicado. La especificación recomiendo usar
dos de sus posibles 4 tipos, Referencia directa (por URI) e identificadores de llave(algún tipo de 

****************************************************************************************************
97

identificador de testigo). Documentos de perfil (por ejemplo SAML o X.509) proveer
extensiones adicionales a estos mecanismos para tomar ventaja de las características especificas
de los diferentes tipos de testigos.
Mecanismos de protección para la comunicación
Como ya explicamos antes, la seguridad del canal, aunque provee servicios importantes, no
es una panacea dado que no resuelve el problema de muchos problemas a los que se enfrentan
los desarrolladores de servicios Web. WSS ayuda a resolver algunos de ellos en el mensaje
SOAP usando mecanismos descritos en la sección de abajo.
Integridad
La especificación WSS hace uso del estándar XML-dsig para asegurar la integridad del
mensaje, restringiendo su funcionalidad en ciertos casos: por ejemplo, referenciado
explícitamente y solamente que puede ser firmados (Los modos de firma inclustada o no
incrustada están permitidos). Antes de firmar el documento XML, se requiere una
transformación para crear una representación canónica, tomando en cuenta el hecho de que los
documentos XML pueden ser representadas en varias formas semánticamente equivalentes. Hay
2 transformaciones principales definidas por el WG de XML Signature en W3C, transformación
canónica inclusiva y exclusiva (C14N y EXC-C14N), las cuales se diferencian en la manera en la
que los nombres de espacio son procesados. La especificación principal de WSS recomienda
específicamente EXC-C14N, ya que permite copiar el contenido XML firmado en otros
documentos sin validar la firma.
Para proveer una manera uniforme de manejar los testigos firmados, WSS agrega la opción
de transformación dereferenciada de Security Token Reference (STR) la cual es comparable a la
referencia de un puntero a un objeto de un tipo específico en los lenguajes de programación. De
manera similar, además de las maneras para manejar llaves que define XML Signature, WSS
permite referencias a testigos de seguridad a través del mecanismo STR, extendido por los
perfiles de testigo para acomodarse a los diferentes tipos de testigos. Un ejemplo típico de firma
se muestra en un ejemplo anterior.
Típicamente una firma XML esta aplicada a los elementos seguros como el cuerpo SOAP y
el estampado de tiempo, junto con cualquier credencial de usuario pasada en la petición. Hay un
giro interesante cuando un elemento en particular es firmado y cifrado también. Dado que estas
operaciones pueden seguirse (incluso repetidamente) en cualquier orden, se requiere conocer el 

****************************************************************************************************
98
orden para la verificación de la firma. Para resolver este problema, la especificación principal de
WSS requiere que cada nuevo elemento sea pre agregado al encabezado de seguridad, definiendo
el orden “natural” de las operaciones. Un problema molesto en particular existe cuando hay
varios encabezados de seguridad en un solo mensaje SOAP, usando bloques traslapados de
firmas y cifrados, dado que no hay nada en este caso que apunte al orden correcto de las
operaciones.
Confidencialidad
Para la protección de la confidencialidad, WSS confía en otro estándar, XML Encryption. De
manera similar a XML-dsig, este estándar opera en elementos selectos del mensaje SOAP, pero
reemplaza el elemento con los datos cifrados con un sub elemento <xenc:EncryptedData> que
contiene los bytes cifrados. Para la eficiencia del cifrado, la especificación recomienda usar una
llave única, la cual es cifrada por la llave pública del receptor y pre agregada al encabezado de
seguridad en un elemento <xenc:EncryptedKey>.
Frescura
La frescura de los mensajes SOAP se resuelve con un mecanismo de estampado de tiempo,
cada encabezado de seguridad puede contener solo un elemento de este tipo, la cual indica en
formato UTC y usando el formato de tiempo UTC, el momento de la creación o expiración del
encabezado WSS. Es importante darse cuenta de que el estampado de tiempo se aplica al
encabezado WSS no al mensaje SOAP en sí, dado que después puede contener múltiples
encabezados de seguridad, cada uno con un estampado de tiempo diferente. Hay un problema no
resuelto con esta forma de “estampado de tiempo simple” dado que el estampado de tiempo es
creado y firmado, es imposible actualizarlo sin romper las firmas existentes, incluso en caso de
un cambio legítimo en el encabezado WSS. 


Si un estampado de tiempo es incluido en el mensaje, usualmente es firmado para evitar
ataques de modificación y re-envío. No hay un mecanismo identificado para resolver el problema
de sincronización del reloj (el cual, como ha sido mencionado antes, no es generalmente un
problema en los modernos sistemas de hoy en día) esto tienen que ser resuelto tanto como el


****************************************************************************************************
99

mecanismo WSS permita. Vea la sección de lecturas para un patrón de diseño que resuelve este
problema.
Mecanismos de control de acceso
En cuanto nos referimos a decisiones de control de acceso, los Servicios Web no ofrecen
mecanismos de protección específicos por si mismos, solo tienen medios para enviar testigos y
datos de forma segura entre los puntos fuente y el destino.
Para una descripción más completa de las tareas de control de acceso, por favor refiérase a
otras secciones de esta guía.
Identificación
La identificación representa el clamar que se tiene cierta identidad, la cual es expresada al
adjuntar cierta información al mensaje. Este puede ser un nombre de usuario, una aserción
SAML, un testigo de Kerberos o cualquier otra pieza de información, de la cual el servicio puede
inferir quien clama ser el emisor.
WSS representa una muy buena manera de transmitir esta información cono esta definido en
el mecanismo extensible para adjuntar varios tipos de testigos a un mensaje. Es el trabajo del
receptor extraer el testigo adjunto e imaginarse que identidad transporta. O rechazar el mensaje si
no puede encontrar un testigo aceptable.
Autentificación
La autentificación puede venir en dos sabores, credenciales de verificación o testigos de
validación. La diferencia sutil entre los dos es que los testigos son creados después de que algún
tipo de autentificación ha ocurrido antes de la invocación actual y ellos usualmente contienen la
identidad del usuario junto con la prueba de su integridad.
WSS ofrece apoyo a varios protocolos de autentificación estándar al definir mecanismos de
vinculación para transmitir testigos específicos al protocolo y ligándolos confiablemente al
emisor. Sin embargo, la mecánica de probar si el emisor es quien dice ser esta a total discreción
del servicio Web. Ya sea que tome el nombre de usuario y hash de la contraseña y la verifique
contra la base de datos o extraiga el nombre del sujeto del certificado X.509 usado para firmal el
mensaje, verifica la cadena de certificados y busca al usuario en la DB. Al momento no hay
requerimientos o estándares que dicten que debe ser de una u otra manera.
Autorización 

****************************************************************************************************
100

XACML puede ser usado para expresar reglas de autorización, pero su uso no es específico a
servicios Web, tiene un alcance mucho más amplio. Así que independientemente de la política o
autorización basada en roles que el servidor ya tenga implementado, es muy probable que sea
utilizado para publicar servicios web también.
Dependiendo de la implementación, puede haber varias capas de autorización involucradas
en el servidor. Por ejemplo, JSRs 224 (JAX-RPC 2.0) y 109 (implementando servicios web
empresariales), la cual define vinculación Java para los servicios Web, que especifica la
implementación de servicios web en contenedores J2EE. Esto significa que cuando un servicio
web es accedido, habrá una autorización por URL que se ejecute por el contenedor J2EE,
seguido por una verificación en la capa del servicio Web para el recurso del servicio web
específico. La granularidad de las verificaciones es específica a la implementación y no esta
dictada por ningún estándar. En el universo Windows ocurre de manera similar, dado que ISS va
a ejecutar si control de acceso en la llamada entrante de http antes de que ellas alcancen
ASP.NET, donde el mensaje SOAP va a ser descompuesto y analizado.
Acuerdo de la política
Usualmente, la comunicación con servicios web esta basada en la interfaz pública de los
puntos finales, definidas en su archivo WSDL. Este descriptor tiene suficientes detalles para
expresar los requerimientos de vinculación de SOAP, pero no define ningún parámetro de
seguridad, dejando a los desarrolladores de servicios web batallando para hallar un mecanismo
“fuera de banda” para determinar los requerimientos de seguridad del punto final.
Para encarar estos obstáculos, la especificación WS-Policy ha concebido un mecanismo para
expresar políticas de requerimientos y cualidades complejas, un tipo de WSDL con esteroides. A
través de la política de SOAP publicada los puntos finales pueden publicar sus requerimientos de
seguridad y sus clientes pueden aplicar las medidas de protección de mensajes apropiadas para
construir las peticiones. La especificación general de WS-Policy (comprendida por 2 documentos
separados) también tiene extensiones para tipos específicos de políticas, uno de ellos, para
seguridad, llamado WS-SecurityPolicy.
Si el solicitante no posee el testigo requerido, puede tratar de obtenerlo a través de un
mecanismo confiable, usando los servicios WS-Trust-enabled, los cuales son llamados para
intercambiar de manera segura varios tipos de testigos para la identidad requerida. 

****************************************************************************************************
101

Desafortunadamente, ambas especificaciones, WS-Policy y WS-trust no han sido enviadas
para estandarización a los cuerpos públicos, y si desarrollo esta progresando con la colaboración
privada de varias compañías, aunque ha sido abierto para otros participantes también. Como
factor positivo, ha habido varios eventos de interoperabilidad conducidos por estas
especificaciones, así que el proceso de desarrollo de estos vínculos críticos en la infraestructura
de seguridad de los servicios Web no es totalmente una caja negra.
Formado de cadenas en servicios Web
Muchas implementaciones existentes o planeadas de SOA o sistemas B2B confían en las
cadenas dinámicas de servicios Web para lograr varias tareas específicas a los negocios, desde
tomar las órdenes a través de manufactura hasta los procesos distribuidos.

Esto es en teoría. En la practica, no hay muchos obstáculos ocultos en el camino, y uno de los
mayores entre ellos son las preocupaciones de seguridad sobre exponer públicamente funciones
de procesamiento a los clientes basados en la intra o Internet.
Aquí hay unos cuantos problemas que golpean la interacción de servicios web. Los modelos
de autentificación y autorización incompatibles para usuarios, la cantidad de confianza entre los
servicios y las vías para establecer tal confianza, manteniendo conexiones seguras y la
sincronización de los directorios de usuario o de otra manera intercambiar los atributos de los
usuarios. Estos problemas serán brevemente sobrepasados en los siguientes párrafos.
Modelos incompatibles de control de acceso a usuario 

****************************************************************************************************
102

Como fue explicado antes, los servicios web por si mismos no incluyen extensiones
separadas por control de acceso, más bien confían en los marcos de seguridad ya existentes. Lo
que sí proveen son mecanismos de descubrimiento y descripción de requerimientos de seguridad
de un servicio SOAP (vía WS-Policy) y de obtener las credenciales de seguridad apropiadas vía
servicios basados en WS-Trust.
Confianza de servicio
Para establecer confianza mutua entre el cliente y el servicio, tienen que satisfacer los
requerimientos del otro, un modelo simple y popular de certificar la autentificación mutua es el
uso de SSL, pero no es escalabre a modelos de servicio abierto y soporta solo un tipo de
autentificación. Los servicios que requieren más flexibilidad tienen que usar el mismo
mecanismo de control de acceso con sus usuarios para establecer las identidades del otro antes de
iniciar una conversación.
Conexiones seguras
Una ves que una conexión segura es establecida sería impráctico requerir su confirmación en
cada interacción, en ves de eso un enlace seguro entre el cliente y servidor se forma y mantienen
todo el tiempo mientras la sesión del cliente este activa. De nuevo el mecanismo más popular
hoy para mantener tal enlace es SSL, pero no es un mecanismo específico a los servicios Web y
tienen varios problemas cuando es aplicado a la comunicación SOAP.
Sincronización de directorios de usuarios
Este es un problema muy severo cuando se lidia con aplicaciones inter-dominio, conforme la
población de usuario tiende a cambiar frecuentemente en los dominios. Entonces, ¿Cómo decide
un servicio en el dominio B si va a confiar en un usuario que dice que ya ha sido autentificado en
el dominio A? Existen diferentes aspectos en este problema. Primero, un mecanismo de SSO
común, el cual implica que un usuario sea conocido en ambos dominios (a través de
sincronización o por otros medios) y que los testigos de autentificación de un domino sean
aceptables en otro. En el mundo de los servicios web, esto se lograría al pasar un testigo de
SAML o Kerberos para el usuario.
Federación de dominios
Otro aspecto de este problema es cuando los usuarios no son compartidos entre los dominios,
sino solo el hecho de que el usuario con cierto ID ha sido autentificado satisfactoriamente en otro 

****************************************************************************************************
103

dominio, como sería el caso de varias grandes corporaciones, las cuales les gustaría formar una
sociedad, pero que se negarían a compartir los detalles de sus clientes. La decisión de aceptar la
petición esta basada entonces en los procedimientos entre dominios, estableciendo un la relación
de confianza especial y permitiendo el intercambio de tales testigos “opacos”, los cuales serían
un ejemplo de relaciones de federación. De estos esfuerzos, el ejemplo más notable es el
proyecto de Liberty Alliance, el cual esta siendo usado ahora como la base para la especificación
de SAML 2.0. Al trabajo en esta área le falta mucho para ser completado y las publicaciones
existentes son solo POC (pruebas de concepto) o proyectos de piloto internos mas que
desarrollos reales entre compañías, aunque el sitio de LA lista algunos de los casos de estudio de
proyectos a larga escala.
Implementaciones disponibles
Es importante darse cuenta desde el principio que ningún estándar de seguridad por si mismo
va a proveer seguridad al intercambio de mensajes, son las implementaciones instaladas, la
cuales medirían la conformidad de el mensaje SOAP de entrada con los estándares aplicables, así
como asegurar los mensajes de salida.
Extensiones de servicio .NET
Desde que los nuevos estándares han sido desarrollados a paso lento, la plataforma .NET no
esta tratando de adecuarse inmediatamente, sino que usa extensiones de servicios web (WSE por
sus siglas en inglés) en ves de eso. WSE, actualmente en la versión 2.0, agrega apoyo para el
desarrollo con los últimos estándares de seguridad en servicios web para la plataforma y
herramientas de desarrollo. Incluso cuando ellos están “en progreso”. Una ves que los estándares
están maduros, se incluye el soporte en versiones futuras de la plataforma .NET. La cual es lo
que pasará cuando .NET 2.0 finalmente vea el mundo. La próxima publicación de WSE 3.0 va a
coincidir con la publicación de VS.2005 y va a tomar ventaja de las últimas innovaciones en la
plataforma .NET 2.0 en las áreas de mensajería y aplicaciones web.
Considerando que Microsoft es uno de los jugadores más activos en el área de seguridad en
servicios web y se reconoce su influencia en la industria, su implementación de WSE es
probablemente una de las mas completas y actualizadas y es muy recomendable correr al menos
una prueba rápida de interoperabilidad con clientes de servicios Web asegurados con WSE si
tiene un servicio basado en Java y la interoperabilidad es un requerimiento (el cual usualmente es 

****************************************************************************************************
104

el caso). Además de las cuestiones de pruebas de seguridad recuerde que la interoperabilidad
básica entre las estructuras de datos de los servicios web en Java y .NET.
Esto es especialmente importante dado que las versiones actuales de las herramientas de
servicios web frecuentemente no manejan claramente los esquemas XML relacionados con WSSecurity
tal cual se publican por OASIS, así que se necesita algo de creatividad en al parte del
diseñador de servicios web. Dicho estos, el paquete de WSE contiene funcionalidad amplia y
bien estructurada, la cual puede ser utilizada clientes de servicios web basados en ASP.NET o
independientes para verificar los mensajes SOAP entrantes y asegurar los de salida a nivel de
infraestructura, dejando a los programadores de servicios Web el saber estos detalles entre otras
cosas. WSE 2.0 soporta el conjunto mas reciente de WS-Policy y WS-SecureConversation. Estos
se necesitan para establecer intercambio seguros de mensajes y sesiones, parecido a los que SSL
hace a nivel de transporte, pero aplicado a la comunicación a nivel mensaje.
Herramientas Java
La mayoría de las herramientas disponibles para Java trabajan a nivel de seguridad XML por
ejemplo XML-dsig y XML-enc, como la suite de seguridad XML de IBM y el proyecto de
seguridad en XML de Apache. Java’s JSR 105 y JSR 106 (aun no están terminados) definen la
vinculación de Java para firmas y cifrado, los cuales permitirán conectar las implementaciones
con los proveedores de JCA una ves que el trabajo en esos JSR sea completado.
Moviéndonos al siguiente nivel, para manejar los servicios web por sí mismos, el horizonte
se vuelve brumoso, en este momento hay muchas implementaciones en varias etapas de
incompletes. Pro ejemplo, Apache esta trabajando en el proyecto WSS4J, el cual se esta
moviendo bastante lento. Ya hay software comercial de Phaos (comprado como Oracle), el cual
sufre muchos problemas de implementación.
Una opción popular entre los desarrolladores de servicios web es el JWSDP de Sun, el cual
soporta seguridad en servicios web. Sin embargo, su soporte a las especificaciones de seguridad
en servicios web (en la versión 1.5) esta limitada al estándar WSS principal para los perfiles de
nombres de usuario y certificados X.509. Las características de seguridad están implementadas
como parte del marco de trabajo JAX-RPC y están basadas en configuración, lo que permite una
separación clara de la implementación del servicio Web.
Sistemas de Hardware y Software 

****************************************************************************************************
105

Esta categoría incluye sistemas completos, más que herramientas o marcos de trabajo. Por un
lado, usualmente ellos proveen mucha funcionalidad “recién salidos de la caja” y por otro lado su
modelo de uso esta ligado fuertemente a la implementación y solución de arquitectura. En
contraste con las herramientas, las cuales no proveen ningún servicio por sí mismo. Sino que
manejan las herramientas necesarias de los desarrolladores de sistemas para incluir las
características de seguridad en los servicios web de sus productos o para golpearse en el pie al no
aplicarlas adecuadamente.
Estos sistemas pueden ser usados en la capa de infraestructura para verificar los mensajes
entrantes contra la política efectiva, verificar firmas, testigos, etc. Antes de pasarlas al servicio
web destino. Cuando es aplicado a los mensajes SOAP salientes, actúan como un proxy, esta
vez, alterando el mensaje para decorarlo con elementos de seguridad, firma y cifrado.
Los sistemas de software se caracterizan por su gran flexibilidad de configuración, pero lento
procesamiento. En el lado brillante, ellos proveen un alto nivel de integración con la
infraestructura empresarial existente, confiando en el usuario de base de datos y el
almacenamiento de políticas para verificar las credenciales, extraídas del encabezado WSS,
desde una perspectiva más amplia. Un ejemplo de este servicio es TransactionMinder de (el
anteriormente) Netegrity un punto de forzado de políticas de servicios web tras de él, colocado
encima del servidor de políticas, el cual hace las decisiones de políticas al verificar las
credenciales extraídas de las políticas y almacenamientos considerados.
Para sistemas de hardware, el desempeño es la clave, ellos han llegado a pasar el umbral de 1
giga bite de procesamiento, y permiten el procesamiento en tiempo real en documentos enormes,
decorados de acuerdo a la variedad de los estándares de seguridad en servicio web mas
actualizados, no solo WSS. El uso simplemente es otro punto atractivo de estos sistemas, en los
casos más triviales, la caja de hardware puede ser literalmente abierto, conectado y ser usado
inmediatamente. Estas cualidades vienen con un precio, este desempeño y desempeño pueden ser
adquiridos mientras que el usuario permanezca en los confines pre-configurados de la caja de
hardware. En el momento que intente integrarlo con una base de datos por medio de retro
llamadas (para aquellas soluciones que tienen esta capacidad, dado que no todas la tienen), la
mayoría de las ventajas se pierden. Como ejemplo de tal aparato, DataPower provee el buen
puente de seguridad XML XS40, el cual actúa como ambos, el cortafuego de entrada y el proxy
de salida para manejar el tráfico XML en tiempo real. 

****************************************************************************************************
106

Problemas
Como es probablemente claro ya desde las secciones previas. Los servicios web un
experimentan mucha turbulencia y tomara un tiempo antes de que ellos puedan realmente
ponerse al corriente. Aquí hay una pequeña lista de los problemas que rodean a los estándares de
seguridad existentes y sus implementaciones.
Inmadurez de los estándares
La mayoría de los estándares son o muy recientes (un par de años a lo mucho) o aun están en
desarrollo. Aunque el desarrollo de estándares esta hecho por comités, los cuales
presumiblemente reduce riesgos de procesos de revisiones y discusiones extensas, algunos
escenarios de error se cuelan periódicamente, como ninguna teoría puede congeniar con las
pruebas resultantes de las corazonadas de miles de desarrolladores trabajando en el campo.
Adicionalmente, no ayuda que por razones políticas algunos de los estándares no se liberan al
público, este es el caso de muchos estándares en el área de WSA o que algunos de los esfuerzos
se dupliquen, como es el caso de as especificaciones de LA y WS-Federation.
Desempeño
El procesamiento de XML es una tarea lenta, la cual es una realidad aceptada y la lentitud de
procesamiento de SOAP es incluso mayor. Ahora, con caras operaciones de conversión textual y
criptográfica mezcladas, estas tareas se convierten en un cuello de botella, incluso con las más
recientes soluciones de hardware para procesamiento de XML y criptografía ofrecidas hoy.
Todos los productos actualmente en el mercado encaran un problema que están tratando de
resolver con variados grados de éxito.
Las soluciones de hardware, aunque sustancialmente (en magnitud) mejoran el desempeño,
no pueden ser siempre usadas como una solución óptima, dado que no son integradas fácilmente
con la infraestructura de bases de datos existentes, al menos no sin hacer sacrificios de
desempeño Otra consideración, incluso si los sistemas de hardware son la solución correcta, ellas
son usualmente altamente especializadas en lo que hacen, aunque los servidores de aplicación
modernos y marcos de seguridad pueden usualmente ofrecer una mayor variedad de mecanismos
de protección. Protegiendo no solo los servicios web, sino también otras aplicaciones publicadas
de manera uniforme y consistente.
Complejidad e Interoperabilidad 

****************************************************************************************************
107

Como puede ser deducido de las secciones previas, estándares de seguridad en servicios web
son muy complejos, y una curva de aprendizaje muy pronunciada esta asociada con ellos.
Muchos de los productos actuales que lidian con la seguridad de servicios web, sufren de
usabilidad muy mediocre dada la complejidad de la infraestructura de soporte. Configurar todas
las políticas, identidades, llaves, y protocolos diferentes toma mucho tiempo y un buen
entendimiento de las tecnologías involucradas, muchas veces los errores que ven los usuarios
finales tienen descripciones muy obscuras y engañosas.
Para ayudar a los administradores y reducir los riesgos de seguridad de malas
configuraciones del sistema, muchas compañías desarrollan plantillas de políticas, las cuales
agrupan mejores prácticas para proteger los mensajes SOAP entrantes y salientes.
Desafortunadamente, este trabajo no esta actualmente en el radar de ningún cuerpo de
estandarización, y parece improbable que tales plantillas sean liberadas al público en el futuro
cercano. Lo más cercano a este esfuerzo puede ser el perfil básico de WS-I (BSP por sus siglas
en inglés), el cual intenta definir las reglas para una mejor interoperabilidad entres los servicios
web usando un subconjunto de características de seguridad comunes para varios estándares de
seguridad como WSS. Sin embargo, este trabajo no esta dirigido a proveer a los administradores
plantillas de seguridad listas para publicar que concuerden con los casos de uso más comunes en
los negocios, sino estableciendo el común denominador mínimo.
Manejo de llaves
El manejo de llaves está usualmente en la base de cualquier otra actividad de seguridad,
como la mayoría de los mecanismos de protección confía en llaves criptográficas de una forma u
otra. Mientras que los servicios web usan el protocolo XKMS para la distribución de llaves, el
manejo local de llaves presenta aun un enorme reto en la mayoría de los casos, dado que el
mecanismo PKI tiene muchos problemas de usabilidad bien documentados. Estos sistemas optan
por usar mecanismos de manejo de llaves hechos a la medida y corren un riesgo importante en
muchos casos, dado que es cuestionable el almacenamiento, actualización y recuperación del
secreto y las llaves privadas, la mayoría de las veces no son manejados adecuadamente en estas
soluciones. 

****************************************************************************************************
108

Lectura adicional
• Piliptchouk, D., WS-Security in the Enterprise, O’Reilly ONJava
http://www.onjava.com/pub/a/onjava/2005/02/09/wssecurity.html
http://www.onjava.com/pub/a/onjava/2005/03/30/wssecurity2.html
• Sitio de WS-Security OASIS
http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wss
• Microsoft, What’s new with WSE 3.0
http://msdn.microsoft.com/webservices/webservices/building/wse/default.aspx?pull=/libr
ary/en-us/dnwse/html/newwse3.asp
• Eoin Keary, Evitando ataques de negación de servicio en servicios Web
https://www.threatsandcountermeasures.com/wiki/default.aspx/ThreatsAndCountermeasu
resCommunityKB.PreventingDOSAttacksOnWebServices 

****************************************************************************************************
109

Autenticación
Objetivo
Proveer servicios de autenticación segura a las aplicaciones Web, mediante:
• Vinculando una unidad del sistema a un usuario individual mediante el uso de una
credencial
• Proveyendo controles de autenticación razonables de acuerdo al riesgo de la aplicación.
• Denegando el acceso a atacantes que usan varios métodos para atacar el sistema de
autenticación.
Entornos afectados
Todos.
Temas relevantes de COBIT
DS5 – Todas las secciones deberían ser revisadas. Esta sección cubre casi los objetivos de
control detallados COBIT. 

****************************************************************************************************
110

Mejores prácticas
• La autenticación es solo tan fuerte como sus procesos de administración de usuarios,
y en particular la emisión de usuarios y evidencia de políticas de identidad. Mientras más
fuerte sea el requerimiento para el no repudio, más caro es el proceso.
• Use la forma más apropiada de autenticación adecuada para su clasificación de
bienes. Por ejemplo, nombres de usuario y contraseñas es adecuado para sistemas de bajo
valor como blogs y foros, respuesta de reto SMS es adecuada para sistemas de comercio
electrónico de bajo valor (en 2005), mientras que el formado de transacción es adecuado
para sistemas de alto valor como sistemas de comercio electrónico de alto valor (todos los
sitios de comercio electrónico deberían considerarla en 2007), bancos e intercambios.
• Re-autenticar al usuario para transacciones de alto valor y acceso a áreas protegidas
(como cambiar de usuario a acceso de nivel administrativo)
• Autenticar la transacción, no el usuario. Los pescadores (Phishers) confían en
esquemas de autenticación de usuarios pobremente implementados
• Las contraseñas son trivialmente rotas y no son adecuadas para sistemas de alto
valor. Por lo tanto, los controles deberían reflejar esto. Cualquier contraseña de menos de
16 caracteres puede ser obtenida mediante fuerza bruta en menos de 2 semanas, así que
establezca su política de contraseñas para que sea razonable:
1. Entrene a sus usuarios para construir contraseñas adecuadas
2. Permita que los usuarios escriban sus contraseñas mientras que las mantengan
seguras
3. Aliente a sus usuarios a usar frases claves en lugar de palabras claves
4. Relaje los requerimientos de expiración de una contraseña de acuerdo a la
fortaleza de la contraseña elegida – contraseñas entre 8 y 16 caracteres no pueden
ser rotas fácilmente no deberían expirar en menos de 30 días, y las frases clave
mayores de 16 caracteres probablemente no necesitan un fuerte limite de
expiración, sino un recordatorio gentil después de (digamos) 90 días.
Técnicas de autenticación Web comunes
Autenticación básica y segura (Digest) 


****************************************************************************************************
111

Casi todos los servidores Web y de aplicación soportan el uso de autenticación básica y
digest. Esto requiere que el explorador Web presente un cuadro de diálogo para obtener el
nombre de usuario y contraseña, y enviarlos al servidor Web, el cual la procesará contra su
propia base de datos de usuario, o en el caso de IIS, con Active Directory.
• La autenticación básica envía la credencial en texto claro. No debería ser usada a menos
que se combine con SSL
• La autenticación HTTP 1.0 Digest solo ofusca la contraseña. No debería ser usada.
• La autenticación HTTP 1.1 Digest un mecanismo de respuesta de reto, lo cual es
razonablemente seguro para aplicaciones de bajo valor.
La razón principal en contra del uso de autenticación básica o digest es debido a:
• Transmisión insegura de credenciales
• Ambas formas de autenticación sufren de ataques de replay y man-in-the-middle
• Ambas requieren SSL para proporcionar alguna forma de confidencialidad e integridad
• La interfaz de usuario es razonablemente fea
• No proporciona una gran cantidad de control a la aplicación final.
Esto no quiere decir que la autenticación básica o digest no son útiles. Puede ser usada para
escudar sitios de desarrollo contra el uso casual o proteger interfaces administrativas de bajo
valor, de ahí en más, esta forma de autenticación no es recomendada.
Autenticación basada en formas
La autenticación basada en formas provee al diseñador de la aplicación Web el mayor control
sobre la interfaz de usuario, y de ahí que es ampliamente usada.
La autenticación basada en formas requiere que la aplicación haga una buena cantidad de
trabajo para implementar autenticación y autorización. Raramente las aplicaciones Web lo hacen
bien. Esta sección de cómo determinar si es vulnerable tiene más de 15 controles específicos para
revisar, y este es el mínimo requerido para autenticar con algo de seguridad.
Si es posible, si elige usar autenticación basada en formas, trate de re-usar un componente de
control de acceso confiable en lugar de escribir el suyo.
La autenticación basada en formas sufre de: 

****************************************************************************************************
112

• Ataques de replay
• Ataques de man-in-the-middle
• Credenciales en texto claro
• Ataques de engaño (luring)
• Controles de contraseñas débiles
Y muchos otros ataques como está documentado en “Como determinar si usted es
vulnerable”
Es vital que proteja los intercambios de acceso usando SSL, e implemente tantos controles
como sea posible. Un problema principal para los diseñadores de aplicaciones Web es el costo de
implementar estos controles cuando el valor de la información no es alto. Un balance necesita ser
establecido para asegurarse que las preocupaciones de seguridad no superen un complejo
esquema de autenticación.
Autenticación integrada
La autenticación integrada es más comúnmente vista en aplicaciones de Intranet usando el
servidor Web Microsoft IIS y aplicaciones ASP.NET. La mayoría de los demás servidores Web
no ofrecen esta alternativa. Aunque puede ser seguro
1
 – a la par con un certificado de
autenticación del lado del cliente debido al uso de la integración de Active Directory basado en
Kerberos (lo que significa que no se necesita almacenar credenciales por la aplicación ni escritas
por el usuario), no es común en aplicaciones en Internet.
Si está desarrollando una aplicación para Intranet y su entorno de desarrollo soporta
autenticación integrada, debería usarla. Significa menos trabajo para usted para desarrollar
controles de autenticación y autorización, una credencial menos para que recuerden los usuarios,
y puede re-utilizar infraestructura de autenticación y autorización pre-existente.
Autenticación basada en certificado
La autenticación basada en certificado es ampliamente implementada en muchos servidores
Web y de aplicación. El sitio Web expide certificados (o intenta confiar en certificados emitidos
externamente). Los certificados públicos son cargados en la base de datos de autenticación del
servidor, y comparados con las sesiones entrantes del navegador. Si los certificados coinciden, el
usuario es autenticado.

1
 Por favor revise el estudio NTLM de Klein en la sección de referencias de este capítulo

****************************************************************************************************
113


La calidad de la autenticación está directamente relacionada con la calidad de la
infraestructura de la llave pública para expedir certificados. Un certificado emitido a cualquiera
que lo pida no es tan confiable como los certificados emitidos después de ver tres formas de
identificación por foto (como pasaporte, licencia de conducir o tarjeta de identificación
nacional).
Hay algunos inconvenientes para el acceso basado en certificado:
• Muchos usuarios comparten las PC’s y necesitan traer sus certificados con ellos. Esto no
es trivial si la aplicación instaló el certificado por ellos – la mayoría de los usuarios están
completamente inconscientes de cómo exportar e importar certificados
• La administración de certificados en un navegador no es trivial en muchos casos
• La revocación certificados con certificados auto emitidos es casi imposible en ambientes
de extranet
• Confiar en certificados “privados” de servidores requiere las decisiones de confianza del
usuario final, como importar certificados CA raíz, para lo cual los usuarios finales
probablemente no están calificados para tomar esta decisión de confianza
• El costo de los certificados y su parte en el modelo de negocio de compañías de
certificados públicas no está relacionado con el costo de la prestación, de ahí que es caro
mantener una base de datos de certificados pública con un gran número de usuarios
Junto con la mala administración de muchas CA’s, particularmente relacionado con
renovación de certificados, el acceso basado en certificado casi siempre ha fallado. Un buen
ejemplo es el servicio en línea de Telstra. En una etapa, solo certificados digitales eran
aceptados. Ahora, esta opción está siendo removida.
Autenticación fuerte
La autenticación fuerte (como tokens, certificados, etc) proporciona un nivel más alto de
seguridad que nombres de usuario y contraseñas. La forma generalizada de autenticación fuerte
es “algo que sabes, algo que tienes”. Por lo tanto, cualquier cosa que requiera un secreto (el “algo
que sabes”) y autenticador como un token, llave USB, o certificado (el “algo que tienes”) es un
control más fuerte que nombres de usuario y contraseñas (que es solo “algo que sabes”) o
biométricos (“algo que eres”).
Cuando usar autenticación fuerte 

****************************************************************************************************
114

Ciertas aplicaciones deberían usar autenticación fuerte:
• Para transacciones de alto valor
• Donde la privacidad es una consideración fuerte o requerida legalmente (como registros
de salud, registros del gobierno, etc)
• Donde las auditorías son requeridas legalmente y requieren una fuerte asociación entre
una persona y la auditoria, como en las aplicaciones bancarias
• Acceso administrativo para sistemas de alto valor o alto riesgo
¿Qué significa alto riesgo?
Cada organización tiene un cierto umbral para el riesgo, que puede variar desde la completa
ignorancia del riesgo hasta la paranoia.
Por ejemplo, el software para foros de discusiones de jardinería no requiere una autenticación
fuerte, mientras que el acceso administrativo a una aplicación financiera procesando millones de
dólares de transacciones al día debería ser obligada a usar autenticación fuerte.
Biométricos no son autenticación fuerte… por si solos
Los biométricos puede ser el “algo que tienes”, pero no remplazan el “algo que sabes”.
Siempre debería usar biométricos junto con nombres de usuario y contraseñas, de otra forma,
debilita significativamente la confianza en el mecanismo de autenticación.
Los biométricos no son tan fuertes como otras formas de autenticación fuerte para
aplicaciones que se acceden remotamente porque:
Los dispositivos están en control del atacante – y la mayoría de los dispositivos biométricos
de bajo nivel no son a prueba de manipulación ni tienen una fuerte protección contra intentos
sucesivos.
No se puede confiar en la inscripción remota – los usuarios podrían sustituir a otros, enlistar
un ojo de vidrio, o una foto de una revista.
Las características biométricas que son medidas no pueden ser revocadas – usted tiene dos
ojos, diez dedos y una cara. Esta es una combinación mortal para sistemas de alto valor – los
atacantes han mostrado previamente que cortarán dedos para obtener un coche. Por lo tanto los
biométricos son demasiado arriesgados para sistemas de alto valor 


****************************************************************************************************
115

Las características biométricas siendo medidas no cambian – las llaves USB con sistemas de
cifrado y otras llaves tienen una salida pseudo-aleatoria que cambia cada 30 segundos. Las
características distintivas no cambian
Altos rangos de falsos positivos comparado con el costo del mecanismo de autenticación.
Con otras formas de autenticación fuerte, no hay falsas aceptaciones.
La mayoría de los dispositivos biométricos para los consumidores son fácilmente engañados
o sujetos a ataques de repeticiones. Mientras más caros sean los dispositivos no significa que
sean mucho mejor que sus contrapartes costeables, pero por el mismo precio de un dispositivo
biométrico de alto nivel, puede obtener 50 o 60 llaves y hasta 1000 tarjetas inteligentes.
Cuando se usa un método de autenticación de un solo factor (por ejemplo, solo una huella
digital sin nombre de usuario o contraseña), los biométricos son la forma más débil de
autenticación disponible y no son adecuadas para aplicaciones inclusive de riesgo moderado. Tal
uso debería ser restringido a dispositivos que el usuario posee sin datos sensibles o riesgosos.
Fortalezas relativas y usos de autenticación fuerte
Contraseñas de una sola vez
Las llaves de contraseñas de una sola vez son baratas – muchas pueden obtenerse por tan solo
$5-10, pero solamente protegen contra repetición de contraseña. Las llaves con contraseñas de
una sola vez usualmente tienen un número desplegado en una pantalla, el usuario escribirá su
nombre de usuario, frase clave y contraseña de una vez.
Las contraseñas de una sola vez no ayudan en contra de ataques man-in-the-middle y como
no presentan ningún detalle del uso al usuario, falsos sitios Web podrían recolectar una
contraseña de una sola vez e ingresar como el usuario y realizar una transacción.
Certificados suaves
Los certificados suaves (también conocidos como autenticación por certificado en el cliente)
son un poco más fuertes que las contraseñas, pero sufren del mismo problema que las
contraseñas y cualquier método de autenticación que procese credenciales automáticamente.
Certificados duros conectados
USB, tarjeta de PC, o cualquier otro dispositivo conectado que pueda ser interrogado
programáticamente por el sistema parece ser la mejor forma de almacenar una credencial.
Aunque típicamente protegen contra la duplicación no autorizada de la credencial y
manipulación del algoritmo, como el dispositivo está conectado a un anfitrión no confiable, el

****************************************************************************************************
116

certificado duro podría ser usado directamente por el sitio de un atacante, evadiendo otro
mecanismo robusto de autenticación proporcionado.
La mayoría de los tokens muestran una ventana emergente que pide permiso al usuario para
proporcionar la credencial. Un atacante podría mostrar una ventana, obtener la autenticación y
redirigirla al sistema real mientras que se realiza una transacción completamente diferente. Este
ataque funciona debido a dos razones:
• Ventana de petición de autenticación – la ventana no tiene relación clara entre la
aplicación y la autenticación. Este es un problema con todas las alertas de Javascript, y no
es exclusivo de esta funcionalidad
• Evadiendo el cerebro del usuario – la mayoría de los usuarios familiares con una
aplicación simplemente aceptarán un dialogo que ven todo el tiempo. Mientras que el
atacante haga una buena reproducción de la ventana de autenticación, los usuarios
aceptarán
Muchos otros problemas rodean a los dispositivos conectados, incluyendo problemas de
soporte si los controladores para el certificado duro interfieren con la operación de la
computadora del usuario.
Los dispositivos conectados son adecuados para acceso interno confiado, y comunidades de
usuario cerradas y confiables.
Respuesta de reto
Respuesta de reto funciona tomando un valor (reto) del sistema y procesándolos en una
forma cifradamente segura para entregar un resultado.
Las calculadoras de respuesta de reto tienen un teclado, y por lo tanto la contraseña es
usualmente considerada ser el NIP requerido para acceder a la calculadora. El usuario introduce
su nombre y respuesta al sistema, lo cual es verificado por el servidor de autenticación.
Aunque protege en contra de ataques de replay, respuesta de reto sufre del problema de
desconexión por autenticación discutido arriba. El usuario está aprobando algo, pero no está
claro qué.
Respuesta de reto SMS
El reto SMS funciona en países con una alta penetración de teléfonos móviles capaces de
enviar mensajes de texto. El método típico es enlistar al usuario en una forma confiable,
registrando su número de teléfono móvil. Cuando una autenticación o transacción es requerida, 


****************************************************************************************************
117

la aplicación envía al usuario un número de transacción a su teléfono móvil, esperemos que con
algún texto para verificar lo que se está siendo firmado (como el ID de referencia de la
transacción).
Los problemas con el reto SMS incluyen:
• Es una ruta pública; no enviar información sensible con el reto
• Si se envía la cantidad de la transacción, el usuario podría confiar en esta figura, pero un
atacante podría enviar al usuario una figura y aprobar otra
• Usted no es la única fuente de mensajes SMS; el usuario no puede verificar la fuente del
SMS, solo esperarlos cuando se usa el sistema
A pesar de esto, respuesta de reto SMS es significativamente más fuerte que nombre de
usuario y contraseña con costo mínimo general.
Firma de transacciones
La firma de transacciones es realizada por calculadoras de respuesta de reto desconectadas.
Al usuario se le presentarán varios elementos para introducir en la calculadora, y calculará una
respuesta basado en estas entradas. Esta es la forma más fuerte de autenticación como el usuario
debe introducir los detalles de la transacción – cualquier otra transacción fallará en producir una
respuesta adecuada. Este tipo de autenticación tiene altas propiedades de no repudio, es robusta
en contra de ataques de man-in-the-middle, no puede ser repetida, y es robusta en contra de
diferentes limites de transacción.
Para el mejor efecto, cuando menos lo siguiente se debe resolver en el reto:
• ID de referencia
• Cuenta origen
• Cantidad de la transacción
Los tokens están basados usualmente en fecha y hora, así que solo hay una pequeña ganancia
si se introduce la fecha de la transacción. Lo malo de esto es:
• Puede tomar hasta 20 o 40 pulsaciones de teclado para completar una transacción, lo cual
es problemático si el usuario tiene que aprobar toda transacción
• Si un token está conectado a la computadora del usuario o usa alguna forma de entrada
automática, aunque los factores humanos son mejores (no hay detalles para introducir),
entonces la propiedad de no repudio es removida ya que no se requiere que el usuario 
****************************************************************************************************
118

piensa acerca del valor de la transacción – solo aprueban la ventana de firmado, que no es
mejor que un certificado suave.
Por lo tanto, aunque la mayoría de las calculadoras para firmado de transacciones permiten la
conexión a la máquina cliente, esta funcionalidad no debería ser usada o hacerse disponible.
Aunque las calculadoras para el firmado de transacciones y EMV (tarjeta inteligente) tipo
calculadoras son idénticas en funcionalidad desde el punto de vista de la aplicación, tienen
valores diferentes para el usuario. Una calculadora será dejada en un escritorio para que todos la
vean, mientras que una tarjeta inteligente EMV disfrazada como la tarjeta de crédito corporativa
del usuario tiene el valor apropiado para el usuario – no la dejarán en el escritorio o en su cajón
sin llave. El valor del sistema debería decidir qué tipo de dispositivo para el firmado de
transacción va a ser proveído al usuario.
Retos de usar autenticación fuerte
La mayoría de los frameworks para aplicaciones son difíciles de integrar con mecanismos de
autenticación fuerte, con la posible excepción de ingreso basado en certificado, que es soportado
por J2EE y .NET.
Su código debe estar integrado con un servidor de autenticación, e implícitamente confiar en
los resultados que emite. Debería considerar cuidadosamente como integrar su aplicación con su
mecanismo elegido para asegurar que es robusto contra inyección, ataques de replay y
modificación.
Muchas organizaciones se resisten a opciones de autenticación fuerte por ser percibidas como
“costosas”. Lo son, pero también las contraseñas. Los costos de la administración de usuarios no
están relacionados usualmente al costo de la infraestructura de autenticación, sino a la emisión y
mantenimiento de los registros de usuarios. Si necesita tener un no-repudio fuerte, el aspecto más
formidable y costeable de la administración de usuarios es el enlistado, mantenimiento y bajas.
Simplemente enviando un token a cualquiera que pida una cuenta no sabremos si el usuario es
quien dice ser. Una ruta de enlistado confiable y robusta es requerida para asegurarse que el
sistema de autenticación es “fuerte”.
Autenticación federada
La autenticación federada le permite externalizar su base de datos de usuario a un tercero, o
para tener varios sitios con un enfoque SSO. La principal razón de negocio para seguridad 

****************************************************************************************************
119

federada es que los usuarios sólo tienen que ingresar una vez, y todos los sitios que soporten esa
autenticación pueden confiar en el token de ingreso y de ahí confiar en el usuario y proveer
servicios personalizados.
Ventajas de autenticación federada:
• Reducir el número total de credenciales que sus usuarios tienen que recordar
• Su(s) sitio(s) es(son) parte de una gran asociación comercial, como una extranet
• Le gustaría ofrecer servicios personalizados a otros usuarios anónimos.
No debería usar autenticación federada, a menos que:
• Confía en el proveedor de la autenticación
• Sus requerimientos de cumplimiento de privacidad son cumplidos por el proveedor de la
autenticación
Las leyes de identidad
Kim Cameron, arquitecto de identidad de Microsoft ha establecido un blog grupal enfocado
en los riesgos alrededor de esquemas de identidad federados. El blog estableció un conjunto de
documentos, con siete leyes de identidad. Estas son: 

****************************************************************************************************
120
1. Control de usuario y consentimiento: Los sistemas de identidad digitales solo
deben revelar información identificando un usuario con el consentimiento del
usuario.
2. Divulgación limitada para uso limitado: La solución que divulga la información
de identificación menor y limita mejor su uso es la más estable, solución a largo
término.
3. La ley de menor partes: Los sistemas de identidad digitales deben limitar la
divulgación de información identificable a partes teniendo un lugar necesario y
justificable en una relación de identidad dada.
4. Identidad dirigida: Un metasistema de identidad universal debe soportar
identificadores “omnidireccionales” para su uso por entidades públicas e
identificadores “unidireccionales” para entidades privadas, de ahí facilitando el
descubrimiento mientras se previene la liberación innecesaria de correspondencias
que maneja.
5. Pluralismo de operadores y tecnologías: Un metasistema de identidad universal
debe canalizar y habilitar el trabajo interno de múltiples entidades tecnológicas
ejecutándose en múltiples proveedores de identidad.
6. Integración humana: Un metasistema de identidad unificado debe definir el
usuario humano como un componente integrado a través de comunicaciones
hombre-máquina protegidas y no ambiguas.
7. Experiencia consistente a través de contextos: Un metasistema de identidad
unificado debe proveer una experiencia simple y consistente mientras habilita
separación de contextos a través de múltiples operadores y tecnologías.
Fuente: http://www.identityblog.com/stories/2005/05/13/TheLawsOfIdentity.html
No está claro al momento de escribir si “leyes” acabarán cambiando el panorama de la
identidad, pero muchos de los problemas discutidos en las leyes deberían ser considerados por
los implementadores de autenticación federada.
SAML
SAML es una parte del mecanismo de la Alianza de la Libertad para proveer autenticación
federada, aunque no es solo para la autenticación federada. 

****************************************************************************************************
121

Al momento de escribir, no hay soporte directo para SAML en ningún framework mayor de
aplicación (J2EE, PHP, o .NET). Bibliotecas de terceros, incluyendo implementaciones open
source, están disponibles para J2EE. Microsoft tiene soporte (muy) limitado para SAML en Web
Services Enhancement 2.0 SP2, que requiere .NET Framework 1.1.
Para más detalles en cómo funciona el protocolo SAML, ver el capítulo de Servicios Web.
Microsoft Passport
Microsoft Passport es un ejemplo de autenticación federada, usada para Hotmail, entrega de
software, mensajería instantánea, y por un tiempo, por socios como eBay. El framework .NET de
Microsoft soporta Passport sign-on. Hay soporte limitado para otras plataformas. Sin embargo,
Microsoft ha retirado el uso de Passport con sus socios, así que usar Passport ya no está
disponible y no es objeto de mayor análisis.
Consideraciones
Hay una toma limitada de sing-on federado en este momento, y a menos que sus
requerimientos de negocio estipulen que necesita soporte para single-sign-on con muchos
cuerpos diferentes, debería evitar el uso de sign-on federado.
Controles de autenticación en el cliente
La validación en el cliente (usualmente escrita en JavaScript) es un buen control para proveer
retroalimentación inmediata para los usuarios si violan las reglas de negocio y para aligerar la
carga del servidor Web. Sin embargo, la validación en el cliente es trivialmente evadida.
Como determinar si usted es vulnerable
Para probar, reduzca la página de acceso a solamente una forma básica como un archivo
HTML local y estático, con una acción POST hacia el servidor Web objetivo.
Ahora es libre de violar las validaciones de entrada en el cliente. Esta forma es también
mucho más fácil de usar con herramientas de ataque automatizadas.
Como protegerse
Para proteger su aplicación, asegure que cada validación y cada política/regla de negocio está
siendo validada en el servidor.

****************************************************************************************************
122

Por ejemplo, si no permite contraseñas en blanco (y no debería), esto debería ser probado
cuando menos en el lado del servidor, y opcionalmente en el cliente. Esto también aplica para
funcionalidades de “cambiar contraseña”.
Para más información, por favor lea la sección de Validación en este libro.
Autenticación positiva
Desafortunadamente, un buen patrón de diseño genérico para autenticación no se ajusta para
todos los casos. Sin embargo, algunos diseños son mejores que otros. Si una aplicación utiliza el
siguiente pseudo-código para autenticar usuarios, cualquier forma de caída terminará con el
usuario siendo autenticado debido a la falsa suposición de que los usuarios casi siempre se
autentican de forma correcta: 

REVISAR CODIGO

Como determinar si usted es vulnerable
Para probar, trate de forzar que falle el mecanismo de autenticación.
Si se cuenta con un algoritmo de autenticación positiva, es probable que cualquier falla o
falla parcial terminará permitiendo el acceso a otras partes de la aplicación. En particular, pruebe
extensivamente cualquier cookie, encabezados, campos de forma y campos ocultos de forma.
Juegue con signos, tipos, longitud y sintaxis. Inyecte NULL, Unicode y CRLF, y pruebe por XSS
e inyecciones SQL. Vea si condiciones de carrera (race conditions) pueden ser explotadas al
simplemente por la intensificación de dos navegadores utilizando un depurador de JavaScript. 


****************************************************************************************************
123

Como protegerse
La mitigación para la autenticación positiva es simple: forzar la autenticación negativa en cada paso: 

Afirmando que la autenticación es verdadera y aplicando correctamente el rol de seguridad al
final del bloque try, detiene la autenticación de manera completa y forzada.
Búsquedas de llave múltiple
El código que usa múltiples claves para buscar registros de usuarios puede llevar a problemas
con inyección SQL o LDAP. Por ejemplo, si el nombre de usuario y la contraseña son usados 

****************************************************************************************************
124

como las llaves para encontrar los registros, y no se valida por inyección SQL o LDAP, el riesgo
es que cualquier campo puede ser abusado.
Por ejemplo, si quiere obtener el primer usuario con la contraseña “password”, sáltese el
campo de nombre de usuario. Alternativamente, como la mayoría de las consultas SQL están
escritas como “select * from table where username = username and password = password”, este
conocimiento podría ser usado por un atacante para simplemente ingresar sin contraseña (es
decir, truncando la consulta a “select * from username=’username’; -- and password = ‘don’t
care’’”). Si el usuario es único, es la llave.
Como determinar si usted es vulnerable
Su aplicación está en riesgo si todo lo siguiente es verdadero:
• Algo además del nombre de usuario es usado en la consulta de búsqueda
• Los campos usados en la consulta de búsqueda (ejemplo, usuario y contraseña) no son
escapados y pueden ser usados para inyección SQL o LDAP.
Para probar esto, intente:
• Realizar una inyección SQL (o LDAP) en contra de la página de acceso, mascarando un
campo para hacerla tomar un valor verdadero: 

Usuario: a’ or ‘1’=’1
Contraseña: password
Usuario: a)(|(objectclass=*)
Contraseña: password
Si lo anterior funciona, será autenticado con la primera cuenta con la contraseña “password”,
o generará un error que podría llevar a nuevas rupturas. Se sorprendería de lo a menudo que
funciona.


****************************************************************************************************
125
Como protegerse 
• Pruebe y descarte fuertemente, o en el peor caso limpie – nombres de usuario adecuados
para almacenar sus usuarios (es decir, trate de escapar los meta caracteres de SQL o
LDAP)
• Use solo el nombre de usuario como llave para las consultas
• Verifique que solamente cero o un registro es regresado

REVISAR CODIGO EN JAVA 
REVISAR CODIGO EN NET 
REVISAR CODIGO EN PHP 

****************************************************************************************************
126

Verificaciones de referencia (referer)
“Referer” es una cabecera HTTP opcional que normalmente contiene la ubicación previa (es
decir, la referencia) de donde vino el navegador. Como el atacante puede cambiarlo trivialmente,
la referencia debe ser tratada con cautela, como es más probable que los atacantes usen la
referencia correcta para evadir controles en su aplicación que usar contenido inválido o dañado.
En general, las aplicaciones están mejor si no contienen ningún código de referencia.
Como determinar si usted es vulnerable
La vulnerabilidad viene en muchas partes: 

****************************************************************************************************
127

• ¿Su código checa la referencia? Si lo hace, ¿Es completamente necesario?
• El código de referencia, ¿Es simple y robusto en contra de todas las formas de ataques del
usuario?
• ¿Lo usa para construir URLs? No lo haga, ya que es casi imposible probar todas las
URLs válidas
Por ejemplo, si login.jsp solo puede ser invocada desde http://www.example.com/index.jsp,
la referencia debería verificar que la referencia es precisamente este valor.
Como protegerse
La mayor parte del tiempo, usar el campo de referencia no es deseable ya que es muy fácil
modificada o falsificada por los atacantes. Muy poca o ninguna confianza puede ser asignada a
su valor, y puede ser difícil de limpiar y usar correctamente.
Programas que desplieguen el contenido de campos de referencia como un analizador de
registros Web deben proteger cuidadosamente contra XSS y otros ataques de inyección HTML.
Si su aplicación tiene que usar la referencia, debería únicamente hacerlo como una defensa
en mecanismo de profundidad, y no tratar de limpiar el campo, solo rechazarlo si no es correcto.
Todo código tiene errores, así que minimice la cantidad de código que trata con el campo de
referencia.
Por ejemplo, si login.jsp solo puede ser invocada desde http://www.example.com/index.jsp,
la referencia podría verificar que la referencia sea este valor. 

REVISAR CODIGO EN JAVA 
REVISAR CODIGO EN NET 
REVISAR CODIGO EN PHP 

****************************************************************************************************
128

Pero comparado a simplemente verificar una variable de sesión contra una matriz de
autorización, las referencias son un débil control de autorización o secuencia.
El navegador recuerda contraseñas
Los navegadores modernos ofrecen la habilidad de administrar la multitud de credenciales
almacenándolas de forma insegura en la computadora.
Como determinar si usted es vulnerable
• Borre todo el estado de su navegador. A menudo la forma más confiable de hacer esto es
crear una cuenta nueva en la computadora de prueba y borrar y re-crear la cuenta entre
iteraciones de prueba
• Use un navegador e ingrese a la aplicación
• Si el navegador ofrece recordar alguna credencial, su aplicación está en riesgo.
• El riesgo es particularmente severo para aplicaciones que contienen información sensible
o financiera.
Como protegerse
Los navegadores modernos ofrecen la habilidad de administrar la multitud de credenciales
almacenándolas de forma insegura en la computadora.
Envíe lo siguiente en cualquier campo de entrada sensitivo, como nombres de usuario,
contraseñas, re-validación de contraseñas, tarjetas de crédito y campos CCV, etc: 

<form … AUTOCOMPLETE="off"> - para todos los campos de la forma
<input … AUTOCOMPLETE="off"> - para solo un campo 

****************************************************************************************************
129

Esto le indica a la mayoría de los navegadores que no almacenen ese campo en la
característica de administración de contraseñas. Recuerde, es solo una sugerencia amable al
navegador, y no todos los navegadores soportan esta etiqueta.
Cuentas predeterminadas
Una vulnerabilidad común son las cuentas predeterminadas – cuentas con nombres de
usuario y/o contraseñas bien conocidas. Particularmente, malos ejemplos son:
• Microsoft SQL Server hasta SQL 2000 Service Pack 3 con seguridad débil o inexistente
para “sa”
• Oracle – un gran número de cuentas conocidas con contraseñas (corregido en versiones
posteriores de Oracle)
Como determinar si usted es vulnerable
• Determine si la infraestructura no tiene cuentas predeterminadas activas (como
Administrator, root, sa, ora, dbsnmp, etc)
• Determine si el código contiene alguna credencial predeterminada, especial, de
depuración o puerta trasera
• Determine si el instalador crea alguna credencial predeterminada, especial o de
depuración.
• Asegúrese que todas las cuentas, particularmente las administrativas, están
completamente especificadas por el instalador/usuario.
No debería haber ejemplos o imágenes en la documentación con nombres de usuario.
Como protegerse
****************************************************************************************************
130
• Nuevas aplicaciones no deberían tener cuentas predeterminadas.
• Asegúrese que la documentación diga que hay que determinar que la infraestructura no
tenga cuentas predeterminadas activas (como Administrator, root, sa, ora, dbsnmp, etc)
• No permita que el código contenga ninguna credencial predeterminada, especial o de
depuración.
• Cuando se crea el instalador, asegúrese que el instalador no cree ninguna credencial
predeterminada, especial o de depuración
• Asegúrese que todas las cuentas, particularmente las administrativas, están
completamente especificadas por el instalador/usuario.
• No debería haber ejemplos o imágenes en la documentación con nombres de usuario
Elección de nombres de usuario
Si elige un esquena de nombres de usuario que es predecible, es probable que los atacantes
puedan realizar una negación de servicio en contra suya. Por ejemplo, los bancos están
particularmente en riesgo si usan números de cliente incrementales monolíticamente o números
de tarjetas de crédito para acceder sus cuentas.
Como determinar si usted es vulnerable
• Formas de malos nombres de usuario incluyen:
• Nombre.Apellido
• Dirección de correo electrónico (a menos que los usuarios sean lo suficientemente
aleatorios para que esto no sea un problema … o si es un proveedor de correo web)
• Cualquier número incrementado monolíticamente
• Información semi-pública, como números de seguro social (solo Estados Unidos –
también conocido como SSN), número de empleado, o similar.
De hecho, usar el SSN como nombre de usuario es ilegal ya que no puede recaudar esta
información sin un propósito adecuado.
Como protegerse
Cuando sea posible, permita al usuario a crear su propio nombre de usuario. Los nombres de
usuario tienen que ser únicos. 

****************************************************************************************************
131

Los nombres de usuario deben ser seguros de HTML, SQL y LDAP – se sugiere solo
permitir A..Z, a..z, y 0-9. Si desea permitir espacios, símbolos @ o apóstrofos, asegúrese que
escapa apropiadamente los caracteres especiales (ver el capítulo de Validación de datos para más
detalles)
Evite el uso de Nombre.Apellido, dirección de correo electrónico, números de tarjeta de
crédito o número de cliente, o cualquier información semi-pública, como número de seguro
social (solo en Estados Unidos – también conocido como SSN), número de empleado, o similar.
Cambio de contraseñas
Cuando el usuario tiene que recordar una parte de la credencial, a veces es necesario
cambiarla, por ejemplo si la contraseña es accidentalmente divulgada a un tercero o el usuario
siente que es tiempo de cambiar la contraseña.
Como determinar si usted es vulnerable
Para probar:
• Cambie la contraseña.
• Cambie la contraseña de nuevo – si hay períodos mínimos antes de poder elegir nuevas
contraseñas (a menudo un día), debería fallar
Como protegerse
• Asegure que su aplicación tiene una función para cambiar contraseña.
• La forma debe incluir la contraseña anterior, la contraseña nueva y la confirmación de la
nueva contraseña
• Use AUTOCOMPLETE=off para prevenir que los navegadores guarden la contraseña
localmente
• Si el usuario ingresa incorrectamente la contraseña anterior varias veces, bloquee la
cuenta y elimine la sesión
Para aplicaciones de mayor riesgo o aquellas con problemas de cumplimiento, debería incluir
la habilidad de prevenir que las contraseñas sean guardadas de manera muy frecuente, lo cual
requiere una historia de contraseñas. El historial de contraseñas debe consistir solamente de
hashes anteriores, no versiones en texto claro de la contraseña. Permita hasta 24 hashes de
contraseñas anteriores. 

****************************************************************************************************
132

Contraseñas cortas
Las contraseñas pueden ser obtenidas por fuerza bruta, rainbow cracked (ataques de
diccionario pre-computados), o fallar a simples ataques de diccionario. Desafortunadamente,
también son el método principal de ingresar usuarios a aplicaciones de todo tipo de riesgos. Entre
más corta sea la contraseña, más alta la tasa de éxito de herramientas de obtención de
contraseñas.
Como determinar si usted es vulnerable
• Determine si la aplicación le permite al usuario no tener una contraseña. Esto nunca
debería ser permitido.
• Determine si la aplicación le permite al usuario usar contraseñas peligrosamente cortas
(menos de cuatro caracteres). Aplicaciones con un requerimiento de autenticación más
fuerte no permitirán esto. Las aplicaciones promedio deberían advertir al usuario que es
débil, pero permitir cambiarla de todas maneras. Aplicaciones pobres simplemente
cambiarán la contraseña
• Cambiar la contraseña para ser incrementalmente más y más grande hasta que la
aplicación le advierta al usuario del tamaño excesivo de la contraseña. Una buena
aplicación permitirá longitudes de contraseñas arbitrarias, y de ahí que no advertirá
En cada iteración, vea si una versión más corta de la contraseña funciona (a menudo solo 8 o
16 caracteres son necesitados) 

****************************************************************************************************
133
Como protegerse 

• Asegure que su aplicación no permita contraseñas en blanco
• Imponga una longitud de contraseña mínima. Para aplicaciones de mayor riesgo, evite
que el usuario use contraseñas muy cortas (configurable). Para aplicaciones de bajo
riesgo, una advertencia para el usuario es aceptable para contraseñas de menos de seis
caracteres de longitud.
• Aliente a los usuarios a usar frases clave grandes (como “My milk shake brings all the
boys to the yard” o “Let me not to the marriage of true minds Admit impediments”) al no
imponer explícitamente controles de complejidad para contraseñas de más de 14
caracteres
• Asegure que su aplicación permita frases clave arbitrariamente grandes usando un
algoritmo decente de cifrado de una vía, como AES-128 o SHA-256.
Controles de contraseñas débiles
ISO 17799 y muchas políticas de seguridad requieren que los usuarios usen y seleccionen
contraseñas razonables, y cambiarlas con cierta frecuencia. La mayoría de las aplicaciones Web
simplemente no cumplen con estas políticas de seguridad. Si es probable que su aplicación sea
usada con ajustes empresariales o requiere cumplimiento con ISO 17799 o estándares similares,
debe implementar controles de autenticación básicos. Esto no significa que deban ser usados de
forma predeterminada, pero deberían existir.
Como determinar si usted es vulnerable
Determine si la aplicación
• Permite contraseñas en blanco
• Permite palabras de diccionario como contraseñas. Este diccionario debe ser el
diccionario local, y no solo el inglés
• Permite elegir contraseñas anteriores. Aplicaciones con autenticación más fuerte o
necesidades de cumplimiento necesitan mantener un historial de hashes de contraseñas
para prevenir que el usuario las re-use. 

****************************************************************************************************
134

Como protegerse 

• Permitir otros idiomas además del Inglés (posiblemente permitiendo más de un idioma a
la vez con locales bilingües multi-lingues como Bélgica o Suiza)
• La aplicación debería tener los siguientes controles (pero impuestos opcionalmente):
• Longitud mínima de contraseña (pero nunca una máxima)
• Frecuencia de cambio de contraseñas
• Edad mínima de la contraseña (para prevenir que los usuarios dar vueltas en el historial
de contraseñas)
• Requerimientos de complejidad de contraseña
• Historial de contraseña
• Duración de bloqueo de contraseña y política (es decir, no bloqueo, bloqueo por X
minutos, permanentemente bloqueada)
Para aplicaciones de más alto riesgo, usar un diccionario de contraseñas débiles para decidir
si la elección del usuario para la contraseña es demasiado débil.
Nota: Complejidad en la frecuencia de cambiar contraseñas es
contraproducente para la seguridad. Es mejor tener una antigua
frase clave fuerte que un revoltijo de 10 caracteres cambiado cada
30 días. Los 30 días asegurarán que no existan PostIt™ en toda la
organización con contraseñas escritas.
Cifrado de contraseñas reversible
Las contraseñas son secretas. No hay razón para descifrarlas baja ninguna circunstancia. El
equipo de soporta debe ser capaz de establecer nuevas contraseñas (con una pista de auditoría,
obviamente), no leer viejas contraseñas. Por lo tanto, no hay razón para almacenar contraseñas
en una forma reversible.
El mecanismo usual es usar un algoritmo de cifrado, como MD5 o SHA1. Sin embargo,
algunas formas han mostrado recientemente ser débiles, así que es necesario moverse a
algoritmos más fuertes a menos de que tenga una gran colección de hashes viejos.
Como determinar si usted es vulnerable 

****************************************************************************************************
135

Para código personalizado usando autenticación basada en formas, analice el algoritmo usada
por el mecanismo de autenticación. El algoritmo debería estar usando AES-128, SHA1 de 256
bits, salteado.
• Algoritmos más viejos como MD5 y SHA1 (de 160 bits) han mostrado ser
potencialmente débiles, y no deberían ser usados más.
• No usar algoritmo (es decir, ve la contraseña en texto claro) es inseguro y no debería ser
usado
• Algoritmos como DES, 3DES, Blowfish, o AES, que permiten que las contraseñas sean
descifradas deberían ser mal vistos.
Como protegerse
Si no comprende la criptografía detrás del cifrado de contraseñas, tal vez vaya a hacerlo mal.
Por favor trate de re-usar implementaciones de contraseñas confiables.
• Use AES-128 o SHA1 de 256 bits
• Use un mecanismo no estático de salteo
• Nunca mande el hash de la contraseña o la contraseña al usuario en ninguna manera
Restablecimiento automático de contraseñas
Los mecanismos de restablecimiento automático de contraseñas son comunes cuando las
organizaciones creen que necesitan evitar altos costos de soporte de la autenticación. Desde la
perspectiva de la administración de riesgos la funcionalidad de restablecimiento de contraseñas
parece aceptable en muchas circunstancias. Sin embargo, la funcionalidad de restablecimiento de
contraseñas equivale a un mecanismo secundario mucho más débil. De un estudio próximo (ver
referencias), parece que los sistemas de restablecimiento de contraseñas con cinco respuestas son
el equivalente a contraseñas con dos caracteres y requieren contraseñas reversibles o en texto
claro que sean almacenadas en la base de datos del sistema, lo cual es lo contrario a las mejores
prácticas de seguridad y la mayoría de las políticas de seguridad de información.
En general, las preguntas requeridas por los sistemas de restablecimiento de contraseñas son
fácilmente encontradas de registros públicos (apellido materno de la madre, color de coche, etc).
En muchos casos, el restablecimiento de contraseña pide información que es ilegal o altamente
problemática de colectar, como números de seguro social. En la mayoría de los regímenes de 

****************************************************************************************************
136

seguridad, puede únicamente colectar información directamente útil para las necesidades de su
aplicación, y mostrarle al usuario por qué está colectando esa información.
En general, a menos de que la información protegida por su mecanismo de autenticación
prácticamente no tenga valor alguno, no debería usar mecanismos de restablecimiento de
contraseñas.
Como determinar si usted es vulnerable
Los mecanismos de restablecimiento de contraseñas varían en complejidad, pero a menudo
son fácilmente abusados.
• Si usa pistas, verifique las pistas por información de conocimiento público o semipúblico
como fecha de nacimiento, SSN, nombre de la madre, etc. No debería usarlas ya
que pueden ser descubiertas en otras fuentes y mediante ingeniería social
• No debería haber pistas en el código HTML
• Si se usa la dirección electrónica como la llave para desbloquear la cuenta, el correo
resultante no debería contener la contraseña, sino un token de validación de una sola vez
válido sólo por un corto periodo de tiempo (digamos 15 minutos). Si es válido por un
largo periodo de tiempo, verifique si es predecible o fácil de generar
• Si el correo contienen un enlace, determine si puede ser usado para phishing
Como protegerse

****************************************************************************************************
137

• Sistemas de transacciones de alto valor no deberían usar sistemas de restablecimiento de
contraseñas. No es recomendado para todas las demás aplicaciones.
• Considere sistemas más baratos y seguros, como pre-enviar al usuario un token de
restablecimiento de contraseña en un sobre cerrado que se repone al ser utilizado.
• Si las preguntas son usadas para identificar al usuario con soporte, simplemente genere
un número aleatorio en la página de “Como llamar a soporte” en su sitio Web y verificar
este número cuando el usuario llame.
• Sea cuidadoso cuando implemente restablecimientos automáticos de contraseñas. La
forma más fácil de hacer lo correcto es “mandar correo electrónico al usuario” ya que
crea un rastro de auditoria y contiene únicamente un secreto – la dirección del usuario.
Sin embargo, esto es riesgoso si la cuenta de correo electrónico ha sido comprometida.
• Enviar un mensaje al usuario explicando que alguien ha activado la funcionalidad de
restablecimiento de contraseña. Pídales que si no lo solicitaron, reportar el incidente. Si lo
solicitaron, proporcione un token corto, criptográficamente único y limitado por el
tiempo listo para ser copiado y pegado. No proporcione un hipervínculo ya que va en
contra de las mejores prácticas para phishing y hará más fácil la estafa a usuarios con el
tiempo. Este valor deberá ser introducido en la aplicación que está esperando el token.
Verifique que el token no ha expirado y es válido para esa cuenta de usuario. Pida al
usuario cambiar su contraseña ahí mismo. Si fue exitoso, envíe un correo de seguimiento
al usuario y al administrador. Registre todo.
Si tiene que elegir la alternativa basada en pistas, use pistas libres de forma, sin sugerencias
públicamente conocidas, como “¿Cuál es su color favorito?” “¿Cuál es su memoria favorita?,”
etc. No use el nombre de la madre, SSN, o similar. El usuario debería de introducir cinco pistas
durante el registro, y presentar tres cuando restablezcan la contraseña.
Obviamente, ambos mecanismos de restablecimiento de contraseña deben ser sobre SSL para
proporcionar integridad y privacidad.
Fuerza bruta
Un ataque común es tratar de ingresar a una cuenta privilegiada bien conocida o alguna otra
cuenta adivinada y tratar fuerza bruta o ataques de diccionario contra la contraseña. Los usuarios 

****************************************************************************************************
138

son buenos para escoger contraseñas realmente malas (como “password”), así que este enfoque
funciona sorprendentemente bien.
Las aplicaciones deberían ser robustas contra ataques de fuerza bruta o de diccionario, como
de Brutus o scripts personalizados. Los ataques de fuerza bruta no pueden ser derrotados
fácilmente, solo demorados.
Como determinar si usted es vulnerable
Para probar la aplicación:
• Use una aplicación de fuerza bruta, como Brutus o un script en Perl personalizado. Este
ataque solo funciona con herramientas.
• Use múltiples diccionarios, no solo inglés
• Use diccionarios de “contraseñas comunes”. Se sorprendería de lo seguido que “root”,
“password”, “”, y otros son usados
• ¿El mensaje de error le dice qué salió mal en la autenticación?
• ¿Los registros de intentos de autenticación fallida ligados a un mecanismo de fuerza
bruta? ¿Bloquea su IP o sesión?
• ¿Puede continuar con la fuerza bruta dejando la sesión cuando queda un intento? Es
decir, si se destruye la sesión a los 5 intentos, ¿Funciona si utiliza 4 y luego inicia una
nueva sesión?
Si la aplicación permite más de cinco intentos de una misma dirección IP, o una tasa de
colección en exceso de 10 peticiones por segundo, es probable que la aplicación caiga en un
ataque de fuerza bruta.
Como protegerse
Verifique que la aplicación: 

****************************************************************************************************
139

• Tiene un retardo desde que el usuario manda la credencial hasta que un suceso o falla es
reportado. Un retardo de tres segundos puede hacer que los ataques de fuerza bruta sean
no sean factibles. Un retardo progresivo (3 segundos, luego 15, luego 30, luego
desconectar) puede hacer los ataques de fuerza bruta casuales completamente inefectivos
• Advierte al usuario con mensajes de error adecuados que no despliegan que parte de la
credencial de la aplicación es incorrecta, usando una página de error de autenticación
común:

• Registra intentos fallidos de autenticación (de hecho, una buena aplicación registra todos
los intentos de autenticación)
• Para aplicaciones que requieren controles más fuertes, bloquear el acceso de direcciones
IP abusivas (es decir, accediendo a más de tres cuentas desde la misma dirección IP, o
intentos de bloquear más de una cuenta)
• Destruya la sesión después de varios intentos.
En tal escenario, el análisis de registros podría revelar múltiples accesos a la misma página
de la misma dirección IP en un corto período de tiempo. Software de correlación de eventos
como Simple Event Correlator (SEC) puede ser usado para definir reglas para analizar los
registros y generar alertas basado en eventos agregados. Esto podría también ser hecho
añadiendo una regla de Snort para alertar en mensajes de error de Autorización fallida de HTTP
yendo de su servidor Web al usuario, y SEC puede ser usado para agregar y correlacionar estas
alertas. 

****************************************************************************************************
140

Recordarme
En las computadoras públicas, la funcionalidad “¿Recordarme?”, donde un usuario puede
simplemente regresar a su cuenta personalizada puede ser peligrosa. Por ejemplo, en Internet
Cafés, puede encontrar sitios a los que usuarios previos han accedido, y publicar ellos, u ordenar
bienes como ellos (por ejemplo con eBay).
Como determinar si usted es vulnerable
• ¿La aplicación tiene la funcionalidad de “recordarme”?
• Si es así, ¿Cuánto dura? Si es permanente, ¿Cuánto dura la cookie antes de expirar?
• ¿Usa un valor predecible en la cookie? Si es así, ¿Puede todo esto ser usado para evadir la
autenticación?
Como protegerse
• Si su aplicación maneja transacciones de alto valor, no debería tener la funcionalidad de
“recordarme”.
• Si el riesgo es mínimo, es suficiente advertir a los usuarios de los peligros antes de
permitirles marcar la casilla.
• Nunca use un token de “pre-autenticado” predecible. El token debería mantenerse en el
registro para asegurarse que el mecanismo de autenticación no sea evitable
Tiempo inactivo
Las aplicaciones que exponen información privada o que pueden causar robo de identidad si
se dejan abiertas no deberían ser accesibles después de un cierto periodo de tiempo.
Como determinar si usted es vulnerable 

****************************************************************************************************
141

• Ingrese a la aplicación
• ¿La aplicación tiene una función de mantener vivo o “ingresar automáticamente”? Si es
así, la probabilidad de que la aplicación falle esta prueba es alta.
• Espere 20 minutos
• Trate de usar la aplicación de nuevo.
• Si la aplicación le permite el uso, la aplicación está en riesgo.
Como protegerse
• Determine un periodo de tiempo adecuado con el negocio.
• Configure el tiempo en el manejador de sesión para cerrar la sesión después de que el
tiempo ha expirado.
Salir
Todas las aplicaciones deberían tener un método para salir de la aplicación. Esto es
particularmente vital para aplicaciones que contengan datos privados o podrían ser usadas para
robo de identidad.
Como determinar si usted es vulnerable
• ¿La aplicación tiene un botón o enlace para salir en alguna parte?
• ¿Cada vista contiene el botón o enlace para salir?
• Cuando usa salir, ¿Puede re-utilizar la sesión? (es decir, copie y pegue una URL de hace
dos o tres clics, y trate de re-usarla)
• (Aplicaciones de alto riesgo) Cuando se usa salir, ¿La aplicación le advierte limpiar la
historia y cache del navegador?
Como protegerse

****************************************************************************************************
142

• Implementar la funcionalidad de salir
• Incluya un botón o enlace para salir en cada vista, y no solo en la página de inicio
• Asegúrese que al salir se cierre la sesión y se limpia cualquier cookie en el navegador
• (Aplicaciones de alto riesgo) Incluya texto para advertir al usuario para limpiar el
historial y cache del navegador si están en una PC compartida.
Expiración de cuenta
Usuarios que tengan que registrarse para su servicio tal vez deseen terminar su asociación
con usted, o en su mayor parte, muchos usuarios simplemente nunca regresan a completar otra
transacción.
Como determinar si usted es vulnerable
• ¿La aplicación tiene un mecanismo para terminar la cuenta?
• ¿Elimina todos los registros del usuario? (registros requeridos para proporcionar historial
de transacciones adecuada para propósitos de impuestos y contabilidad)
• Si los registros son parcialmente borrados, ¿Eliminan todos los registros no esenciales?
Como protegerse
• Los usuarios deberían tener la habilidad de eliminar su cuenta. Este proceso debería
requerir confirmación, pero no debería hacer muy difícil para el usuario eliminar sus
registros.
• Las cuentas que han ingresado in un largo periodo de tiempo deberían ser bloqueadas, o
preferentemente borradas.
• Si conserva registros, está requerido por la mayoría de los regímenes de privacidad a
detallar lo que conserva y por qué al usuario en su declaración de privacidad.
Cuando se borran parcialmente las cuentas (es decir, necesita mantener una historia de las
transacciones o historial de contabilidad), asegúrese que toda la información personalmente
identificable no esté disponible o alcanzable desde la aplicación Web, es decir, expórtela a una
base de datos externa de usuarios archivados o formato CSV 

****************************************************************************************************
143

Auto-registro
Los esquemas de auto-registro suenan como una muy buena idea hasta que se dé cuenta que
permiten a los usuarios anónimos acceder a recursos protegidos. Cualquier aplicación que
implemente auto-registro debería incluir pasos para protegerse a si misma de ser abusada.
Como determinar si usted es vulnerable
• La característica de auto-registro, ¿Permitirá acceso completo a todas las funciones sin
intervención humana?
• Si hay límites, ¿Son impuestos si sabe de ellos? Muchas aplicaciones simplemente no
permiten ver una URL en particular, pero ¿funciona esa URL cuando la copia y pega
desde una cuenta más privilegiada?
• El proceso de aumentar las capacidades de la cuenta, ¿Puede ser forzado u obtenido
mediante ingeniería social?
Como protegerse
• Implemente el auto-registro de manera cuidadosa basado en el riesgo para su negocio.
Por ejemplo, podría desear poner límites monetarios o de transacciones para nuevas
cuentas.
• Si limites son impuestos, deberían ser validados por reglas de negocio, y no sólo usando
seguridad a través de oscuridad.
• Asegure que el proceso para aumentar las características de una cuenta es simple y
transparente.
• Cuando las cuentas son modificadas, asegúrese que se mantenga un rastro de auditoria o
de actividad
CAPTCHA
Los sistemas CAPTCHA (“Prueba de Turing pública y automática para diferenciar a
máquinas y humanos”) supuestamente permiten a los diseñadores Web para evitar que los nohumanos
se registren en sitios Web. 

****************************************************************************************************
144
La razón usual para implementar CAPTCHA es para prevenir que los spammers se registren
y contaminen las aplicaciones con spam y enlaces pornográficos. Este es un problema
particularmente malo con el software de blog y foros, pero cualquier aplicación está en riesgo si
los motores de búsqueda pueden indexar contenido.
Como determinar si usted es vulnerable
El método principal de romper CAPTCHA es tomar la imagen y usar humanos para
descifrarla. Esto ocurre con “pases de días gratis” para sitios de adultos. A una persona que
quiere ver imágenes gratis se le presenta con el CAPTCHA capturado y muy a menudo, ellos
escribirán las letras para una pequeña recompensa. Esto derrota completamente el mecanismo
CAPTCHA.
Los mecanismos CAPTCHA visuales o audibles por su naturaleza no son accesibles para
usuarios ciegos (o sordos), y como consecuencia de tratar de derrotar a software de
reconocimiento de caracteres, a menudo bloquean a los usuarios daltónicos (que puede ser hasta
el 10 % de la población masculina).
Nota: Cualquier sitio web que tiene el mandato o es legalmente requerido a ser
accesible, no debe usar CAPTCHA.
Como protegerse
No use CAPTCHA. Son ilegales si es requerido que sea accesible a todos los usuarios (a
menudo el caso de sitios de gobierno, salud, bancos, e infraestructura protegida nacionalmente,
particularmente si no hay otro método de interactuar con esa organización).
Si tiene que:
• Siempre proporcione un método por el cual un usuario pueda registrarse en su sitio web
sin conexión o vía otro método
• Disuada el uso de registros automáticos usando la etiqueta “no follow”. Los motores de
búsqueda ignorarán hipervínculos y páginas con esta etiqueta puesta, devaluando
inmensamente el uso de spam de enlaces
• Limite los privilegios de cuentas recién registradas hasta que una validación positiva haya
ocurrida. Esto puede ser tan simple como incluir un ID de referencia único a una tarjeta
de crédito registrada, o requiriendo una cierta cantidad de tiempo antes de que ciertas 

****************************************************************************************************
145

características sean desbloqueadas, como derechos para publicaciones públicas o no
permitir acceso a todas las características
Lectura adicional
• “Body Check”, Revista c’t. Artículo muy divertido de 2002
http://www.heise.de/ct/english/02/11/114/
• Klein, A., NTLM Authentication and HTTP proxies don’t mix, publicación a webappsec
http://packetstormsecurity.nl/papers/general/NTLMhttp.txt
• ¿Cuánto pasa antes de que su firma es verificada? Aparentemente tres pantallas de
plasma:
http://www.zug.com/pranks/credit_card/
• Schneier, B., The failure of two factor authentication, blog / ensayo
http://www.schneier.com/blog/archives/2005/03/the_failure_of.html
• Blog grupal liderado por Kim Cameron, The Laws of Identity
http://www.identityblog.com/stories/2004/12/09/thelaws.html
• van der Stock, A., “On the entropy of password reset systems”, documento de
investigación no publicado. Si desea participar en la encuesta de esta investigación, por
favor contacte a vanderaj@owasp.org 

****************************************************************************************************
146

Autorización
Objetivos
• Asegurar que únicamente usuarios autorizados puedan realizar acciones permitidas con
su correspondiente nivel de privilegio.
• Controlar el acceso a recursos protegidos mediante decisiones basadas en el rol o el nivel
de privilegio.
• Prevenir ataques de escalada de privilegios, como por ejemplo utilizar funciones de
administrativas siendo un usuario anónimo o incluso un usuario autenticado.
Entorno afectado
Todas las aplicaciones.
Temas relevantes de COBIT
DS5 – Se deben revisar todas las secciones. Esta sección cubre casi todos los objetivos de
control detallados del COBIT.
Principio de menor privilegio
La mayoría de las veces, las aplicaciones web se ejecutan con privilegios excesivos, ya sea
dando a los usuarios demasiados privilegios sobre recursos protegidos, como en una base de
datos (por ejemplo, permitiendo eliminar tablas o dando la posibilidad de seleccionar
información de cualquier tabla para ejecutar procedimientos almacenados privilegiados como
xp_cmdshell()), dejando que se ejecute la infraestructura de la aplicación Web con las cuentas
del sistema más privilegiadas ( como por ejemplo LOCALSYSTEM o root), o programando en
entornos gestionados ejecutándose con acceso total fuera de su “sandbox” ( por ejemplo
AllPermission de Java o el FullTrust de .NET).
Si se encuentra cualquier otro tema, los demasiados privilegios pueden proporcionar a un
atacante el control total de la máquina, e incluso a menudo, de la infraestructura al completo. No
se puede afirmar rigurosamente que las aplicaciones web funcionen con los menos privilegios
posibles.
Como determinar si se es vulnerable 

****************************************************************************************************
147

• Las cuentas System (aquellas que ejecutan el entorno) deben poseer los menores
privilegios posibles. Nunca se deben utilizar cuentas tales como “Administrador”, “root”,
“sa”, “sysman”, “Supervisor”, o cualquier otra con máximos privilegios para ejecutar la
aplicación o conectar al servidor Web, base de datos o middleware.
• Las cuentas de usuario deben poseer únicamente los privilegios necesarios en la
aplicación para realizar sus tareas asignadas.
• Los usuarios no deben ser administradores
• Los usuarios no deben ser capaces de utilizar cualquier función de administración o sin
estar autorizados.
Como protegerse
• Tanto los entornos de desarrollo, como de pruebas y de “staging”, deben ser configurados
para funcionar con los menores privilegios posibles, así como en producción.
• Hay que asegurar que las cuentas del sistema (aquellas que ejecutan el entorno) poseen
los menores privilegios posibles. Nunca deben utilizarse las de “Administrador”, “root”,
“sa”, “sysman”, “Supervisor”, o cualquier otra con máximos privilegios para ejecutar la
aplicación o conectar al servidor Web, base de datos o middleware.
• Las cuentas de usuario deben poseer únicamente los privilegios necesarios en la
aplicación para realizar sus tareas asignadas.
• Los usuarios no deben ser administradores
• Los usuarios no deben ser capaces de utilizar funciones de administración o para las que
no se tenga autorización. Ver la sección de autorización para más detalles.
• El acceso a base de datos debe realizarse mediante procedimientos almacenados
parametrizados (o similiar) para permitir que todos los accesos a una tabla sean
revocados (por ejemplo, selección, eliminación, actualización, inserción, etc.) utilizando
una cuenta de la base de datos con pocos privilegios. Esta cuenta no deben tener un rol
SQL mayor al de “usuario” (o similar)
• La seguridad en el código de acceso debe ser evaluado y reafirmado. Si sólo se necesita
la posibilidad de resolver nombres DNS, sólo se deben pedir permisos de acceso que 

****************************************************************************************************
148

permitan esto. De esta manera, si el código intenta leer el /etc/passwd, no podrá y
finalizará.
• Las cuentas de la infraestructura deberá poseer privilegios mínimos, como LOCAL
SERVICE o “nobody”. Sin embargo, si todo el código se ejecuta bajo estas cuentas,
aparecerá el problema de las “llaves del reino”. Si se sabe lo que se está haciendo, con la
replicación cuidadosa de los atributos de las cuentas menos privilegiadas como LOCAL
SERVICE o “nobody” es mejor crear usuarios con pocos privilegios que compartir dichas
cuentas LOCAL SERVICE o “nobody”.
Listas de Control de Acceso
Muchos controles de acceso son inseguros al implantarse. Por ejemplo, la política de
seguridad por omisión en el sistema de ficheros Java 2 es “All Permission”, un nivel de acceso
que normalmente no es requerido por las aplicaciones.
grant codeBase "file:${{java.ext.dirs}}/*" {
 permission java.security.AllPermission;
};
Las aplicaciones deben funcionar correctamente con los mínimos privilegios que necesiten y
deben crear listas de control de acceso que reafirmen los privilegios más ajustados posibles.
Como determinar si se es vulnerable
• Determinar si los controles de ficheros, red, usuarios y otros niveles del sistema son
demasiado permisivos.
• Determinar si los usuarios se encuentran el menor número de grupos o roles.
• Determinar si los roles poseen el menor conjunto de privilegios posible
• Determinar si la aplicación funciona con los privilegios reducidos, como por ejemplo al
proporcionar un fichero de política o una configuración en “modo seguro”
Como protegerse
Controles de acceso a considerar 

****************************************************************************************************
149

• Comenzar siempre las listas de control de acceso utilizando “deny all” (“denegar todo”) y
seguidamente ir añadiendo sólo los privilegios y roles necesarios.
• Controles de acceso a red: filtros basados en el host y cortafuegos
• Controles de acceso al sistema de ficheros: permisos en ficheros y directorios
• Controles de acceso de usuarios: seguridad en las plataformas de usuarios y grupos.
Controles de acceso Java / .NET / PHP : Escribir siempre una política de seguridad de Java 2
o en .NET para asegurar la seguridad en los accesos del código funciona tanto hablando en
términos de programación como en los permisos de ensamblado. En PHP, considerar el uso de la
funcionalidad “safe mode”, incluyendo las directivas open_basedir para limitar el acceso al
sistema de ficheros.
Controles de acceso a información: intentar utilizar únicamente procedimientos almacenados,
para poder así rechazar la mayoría de los privilegios de los usuarios de la base de datos –
previene la inyección de código SQL.
Explote su plataforma: Muchas variantes UNIX tienen extensiones de “base segura o fiable
de cómputo” (conocidas como “Trusted Computing Base”) que incluyen listas de control de
accesos. Windows las lleva de fábrica. ¡Utilícelas!
Controles de autorización personalizados
La mayoría de los entornos aplicativos tienen mecanismos bien desarrollados de autorización
(como el JAAS de JAVA o las posibilidades de autorización en el web.config de .NET)
Sin embargo, muchas aplicaciones contienen sus propios mecanismos personalizados y
propios. Esto añade complejidad y posibles fallos. A menos que exista una razón explicita de
evitar las funcionalidades ya incluidas, el código debería dejar paso al soporte propio del
entorno.
Como determinar si se es vulnerable

****************************************************************************************************
150

• ¿El código dificulta las capacidades de autorización que se incluyen por defecto en el
entorno de programación?
• ¿Se podría simplificar la aplicación si se tienen en cuenta el modelo de
autenticación/autorización integrado en el Framework?
• Si se utiliza el código personalizado, considere una correcta autenticación y problemas a
la hora de manejar las excepciones - ¿se puede “autorizar” a un usuario y ocurre una
excepción?
• ¿Qué cobertura se obtiene utilizando los controles de autenticación propios? ¿Se
encuentran protegidos por el mecanismo tanto el código como los recursos?
Como protegerse
• Siempre se debe escribir la menor cantidad de código posible, sobretodo cuando los
propios entornos facilitan alternativas de gran calidad.
• Si el código personalizado propio es requerido, se debe tener en consideración los
problemas de autenticación y manejo de excepciones – asegurar que en el caso de que se
lance una excepción, se cierra la sesión del usuario o que por lo menos se evita que se
acceda a un recurso protegido o a una función.
• Asegurar que por omisión, la cobertura alcanza el 100%
Rutinas de autorización centralizadas
Un error común es la de llevar a cabo una comprobación de la autorización copiando y
pegando un trozo de código, o incluso peor, reescribiéndola cada vez. Las aplicaciones bien
desarrolladas centralizan las rutinas de control de acceso, sobre todo las de autorización, por lo
que si se encuentra algún fallo o vulnerabilidad, pueden arreglarse todas las ocurrencias sólo
modificando el código una vez, aplicándose a todas las secciones al mismo tiempo.
Como determinar si se es vulnerable
Las aplicaciones que son vulnerables a este ataque tienen fragmentos de código sobre
autorización a lo largo de todo el código.
Como protegerse 

****************************************************************************************************
151
****************************************************************************************************
152
****************************************************************************************************
153
****************************************************************************************************
154
****************************************************************************************************
155
****************************************************************************************************
156
****************************************************************************************************
157
****************************************************************************************************
158
****************************************************************************************************
159
****************************************************************************************************
160
****************************************************************************************************
161
****************************************************************************************************
162
****************************************************************************************************
163
****************************************************************************************************
164
****************************************************************************************************
165
****************************************************************************************************
166
****************************************************************************************************
167
****************************************************************************************************
168
****************************************************************************************************
169
****************************************************************************************************
170
****************************************************************************************************
171
****************************************************************************************************
172
****************************************************************************************************
173
****************************************************************************************************
174
****************************************************************************************************
175
****************************************************************************************************
176
****************************************************************************************************
177
****************************************************************************************************
178
****************************************************************************************************
179
****************************************************************************************************
180
****************************************************************************************************
181
****************************************************************************************************
182
****************************************************************************************************
183
****************************************************************************************************
184
****************************************************************************************************
185
****************************************************************************************************
186
****************************************************************************************************
187
****************************************************************************************************
188
****************************************************************************************************
189
****************************************************************************************************
190
****************************************************************************************************
191
****************************************************************************************************
192
****************************************************************************************************
193
****************************************************************************************************
194
****************************************************************************************************
195
****************************************************************************************************
196
****************************************************************************************************
197
****************************************************************************************************
198
****************************************************************************************************
199
****************************************************************************************************
200
****************************************************************************************************
201
****************************************************************************************************
202
****************************************************************************************************
203
****************************************************************************************************
204
****************************************************************************************************
205
****************************************************************************************************
206
****************************************************************************************************
207
****************************************************************************************************
208
****************************************************************************************************
209
****************************************************************************************************
210
****************************************************************************************************

211
****************************************************************************************************
212
****************************************************************************************************
213
****************************************************************************************************
214
****************************************************************************************************
215
****************************************************************************************************
216
****************************************************************************************************
217
****************************************************************************************************
218
****************************************************************************************************
219
****************************************************************************************************
220
****************************************************************************************************
221
****************************************************************************************************
222
****************************************************************************************************
223
****************************************************************************************************
224
****************************************************************************************************
225
****************************************************************************************************
226
****************************************************************************************************
227
****************************************************************************************************
228
****************************************************************************************************
229
****************************************************************************************************
230
****************************************************************************************************
231
****************************************************************************************************
232
****************************************************************************************************
233
****************************************************************************************************
234
****************************************************************************************************
235
****************************************************************************************************
236
****************************************************************************************************
237
****************************************************************************************************
238
****************************************************************************************************
239
****************************************************************************************************

240
****************************************************************************************************
241
****************************************************************************************************
242
****************************************************************************************************
243
****************************************************************************************************
244
****************************************************************************************************
245
****************************************************************************************************
246
****************************************************************************************************
247
****************************************************************************************************
248
****************************************************************************************************
249
****************************************************************************************************
250
****************************************************************************************************
251
****************************************************************************************************
252
****************************************************************************************************
253
****************************************************************************************************
254
****************************************************************************************************
255
****************************************************************************************************
256
****************************************************************************************************
257
****************************************************************************************************
258
****************************************************************************************************
259
****************************************************************************************************
260
****************************************************************************************************
261
****************************************************************************************************
262
****************************************************************************************************
263
****************************************************************************************************
264
****************************************************************************************************
265
****************************************************************************************************
266
****************************************************************************************************
267
****************************************************************************************************
268
****************************************************************************************************
269
****************************************************************************************************
270
****************************************************************************************************
271
****************************************************************************************************
272
****************************************************************************************************
273
****************************************************************************************************
274
****************************************************************************************************
275
****************************************************************************************************
276
****************************************************************************************************
277
****************************************************************************************************
278
****************************************************************************************************
279
****************************************************************************************************
280
****************************************************************************************************
281
****************************************************************************************************
282
****************************************************************************************************
283
****************************************************************************************************
284
****************************************************************************************************
285
****************************************************************************************************
286
****************************************************************************************************
287
****************************************************************************************************
288
****************************************************************************************************
289
****************************************************************************************************
290
****************************************************************************************************
291
****************************************************************************************************
292
****************************************************************************************************
293
****************************************************************************************************
294
****************************************************************************************************
295
****************************************************************************************************
296
****************************************************************************************************
297
****************************************************************************************************
298
****************************************************************************************************
299
****************************************************************************************************
300
****************************************************************************************************
301
****************************************************************************************************
302
****************************************************************************************************
303
****************************************************************************************************
****************************************************************************************************



304
****************************************************************************************************
305
****************************************************************************************************
306
****************************************************************************************************
307
****************************************************************************************************
308
****************************************************************************************************
309
****************************************************************************************************
310
****************************************************************************************************
311
****************************************************************************************************





